// Создать
//	Создает объект встроенного языка и возвращает его
// Параметры:
//   ТекстВыражения			- Строка - Текст выражения
//   ИгнорироватьРегистр	- Булево - Если включено, регистр символов не важен для поиска
//   Многострочный			- Булево - Если включено, ^ и $ соответствуют началу и концу строки
//
//  Возвращаемое значение:
//   РегулярноеВыражение - Объект
//
Функция Создать(ТекстВыражения,  ИгнорироватьРегистр = Истина, Многострочный = Истина) Экспорт

	Выражение = Новый РегулярноеВыражение(ТекстВыражения);
	Выражение.ИгнорироватьРегистр = ИгнорироватьРегистр;
	Выражение.Многострочный = Многострочный;

	Возврат Выражение;
 
КонецФункции

Функция ПолучитьДочерниеЭлементыОписанияКонфигурации(Знач СодержимоеФайла, ЭтоEDT) Экспорт
	
	Элементы = Новый Структура("Количество,ДочерниеЭлементыСтрока,Совпадения", 0, "", Неопределено);
	
	Если ЭтоEDT Тогда
		Регексп = Создать("(<\/languages>\s+)^(?!.*languages)([\w\W]*)(<\/mdclass\:Configuration>)");
	Иначе
		Регексп = Создать("(<ChildObjects>\s+?)([\w\W]+?)(\s+<\/ChildObjects>)");
	КонецЕсли;
	
	ДочерниеЭлементы = Регексп.НайтиСовпадения(СодержимоеФайла);
	Элементы.Количество = ДочерниеЭлементы.Количество();
	Элементы.Совпадения = ДочерниеЭлементы;
	
	Если НЕ Элементы.Количество = 0 Тогда // Если количество 0 вернется пустая коллекция
		
		Элементы.ДочерниеЭлементыСтрока = ДочерниеЭлементы[0].Группы[2].Значение;

		Если ЭтоEDT Тогда
			РегекспМетаданные = Создать("^\s+<[\w]+>([a-zA-Z]+)\.([а-яa-zA-ZА-Я0-9_]+)<\/[\w]+>");
		Иначе
			РегекспМетаданные = Создать("^\s+<([\w]+)>([а-яa-zA-ZА-Я0-9_]+)<\/[\w]+>");
		КонецЕсли;

		Элементы.Совпадения = РегекспМетаданные.НайтиСовпадения(Элементы.ДочерниеЭлементыСтрока);
		
	КонецЕсли;
	
	Возврат Элементы;

КонецФункции

Функция СортироватьМассивТеговСостава(ТекстXML, ИмяТега, РазделительЭлементов, УчитываяПрефикс) Экспорт

	ШаблонПоискаСостава = СтрШаблон("[\s]*<%1>[\w\W]+<\/%1>[\t ]*\n*", ИмяТега);
	ПоискСостава = Создать(ШаблонПоискаСостава);
	СовпаденияСостава = ПоискСостава.НайтиСовпадения(ТекстXML);
	Если СовпаденияСостава.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	СовпадениеСостава = СовпаденияСостава[0];

	СортируемаяСтрокаТегов = СовпадениеСостава.Группы[0].Значение;
	СтрокаЗамены = СортированныеТегиСостава(СортируемаяСтрокаТегов, РазделительЭлементов, УчитываяПрефикс);

	Если СтрСравнить(СортируемаяСтрокаТегов, СтрокаЗамены) = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ТекстXML = ПоискСостава.Заменить(ТекстXML, СтрокаЗамены);
	Возврат Истина;

КонецФункции

Функция СортироватьВложенныйМассивТеговСостава(ТекстXML, ИмяРодительскогоТега, ОтступРодительскогоТега, РазделительЭлементов, УчитываяПрефикс) Экспорт
	
	ШаблонПоискаСостава = СтрШаблон("\s*<%1>([\w\W]+)<\/%1>[\t ]*\n*", ИмяРодительскогоТега);
	ПоискСостава = Создать(ШаблонПоискаСостава);
	СовпаденияСостава = ПоискСостава.НайтиСовпадения(ТекстXML);
	Если СовпаденияСостава.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	СовпадениеСостава = СовпаденияСостава[0];
	
	СортируемаяСтрокаТегов = СовпадениеСостава.Группы[1].Значение; // Текст внутри родительского тега
	СтрокаЗамены = СортированныеТегиСостава(СортируемаяСтрокаТегов, РазделительЭлементов, УчитываяПрефикс);
	
	Если ЗначениеЗаполнено(СтрокаЗамены) Тогда
		СтрокаЗамены = СтрШаблон(
			"
			|%1<%2>%3
			|%1</%2>
			|",
			ОтступРодительскогоТега, ИмяРодительскогоТега, СокрП(СтрокаЗамены));
	Иначе
		СтрокаЗамены = СтрШаблон(
			"
			|%1<%2/>
			|",
			ОтступРодительскогоТега, ИмяРодительскогоТега);
	КонецЕсли;

	ИсходнаяСтрока = СовпадениеСостава.Группы[0].Значение; // Всё совпадение, которое будем заменять
	Если СтрСравнить(ИсходнаяСтрока, СтрокаЗамены) = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ТекстXML = ПоискСостава.Заменить(ТекстXML, СтрокаЗамены);
	Возврат Истина;

КонецФункции

Функция СортированныеТегиСостава(СортируемаяСтрокаXML, РазделительЭлементов, УчитываяПрефикс = Неопределено) Экспорт

	ПрефиксыСортировки  = ПрефиксыСортировки(УчитываяПрефикс);
	ТаблицыПоПрефиксам  = ТаблицыПоПрефиксам(ПрефиксыСортировки);
	
	ПоискТегов = Создать("<[^>]+>([^<]*)<\/[^>]+>"); // Разбивка по тегам
	Для Каждого СовпадениеТега Из ПоискТегов.НайтиСовпадения(СортируемаяСтрокаXML) Цикл
		
		ЗначениеТега = СовпадениеТега.Группы[1].Значение; // Имя метаданных или типа
		Если СтрНайти(ЗначениеТега, "-") > 0 Тогда // Вероятно это UID (битая ссылка)
			Продолжить;
		КонецЕсли;

		ИмяОбъекта = ИмяОбъекта(ЗначениеТега);
		ИндексТаблицы = ИндексТаблицыПоПрефиксу(ИмяОбъекта, ПрефиксыСортировки);
		ТаблицыПоПрефиксам[ИндексТаблицы].Добавить().СтрокаТега = СовпадениеТега.Группы[0].Значение;

	КонецЦикла;

	СортированныеТегиПоПрефиксами = Новый Массив();
	Для каждого ТаблицаПрефикса Из ТаблицыПоПрефиксам Цикл
		Если ТаблицаПрефикса.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаПрефикса.Сортировать("СтрокаТега");
		ТаблицаПрефикса.Свернуть("СтрокаТега");
		СортированныеТегиПоПрефиксами.Добавить(СтрСоединить(ТаблицаПрефикса.ВыгрузитьКолонку("СтрокаТега"), РазделительЭлементов));
	КонецЦикла;

	Результат = СтрСоединить(СортированныеТегиПоПрефиксами, РазделительЭлементов);
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат = РазделительЭлементов + Результат;
	КонецЕсли;
	Результат = Результат + Символы.ПС;

	Возврат Результат;

КонецФункции

Функция ПрефиксыСортировки(Знач ЗначениеИзНастройки)

	ПрефиксыСортировки = Новый Массив();

	Если ЗначениеЗаполнено(ЗначениеИзНастройки) Тогда

		Если ТипЗнч(ЗначениеИзНастройки) <> Тип("Массив") Тогда
			ЗначениеИзНастройки = СтрРазделить(ЗначениеИзНастройки, ",", Ложь);
		КонецЕсли;

		Для Каждого Элемент Из ЗначениеИзНастройки Цикл
			Префикс = СокрЛП(Элемент);
			Если ЗначениеЗаполнено(Префикс) Тогда
				ПрефиксыСортировки.Добавить(Префикс);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Возврат ПрефиксыСортировки;

КонецФункции

Функция ТаблицыПоПрефиксам(ПрефиксыСортировки)

	ТаблицыПоПрефиксам = Новый Массив();
	
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("СтрокаТега");
	ТаблицыПоПрефиксам.Добавить(ТаблицаСортировки);
	
	Для каждого Префикс Из ПрефиксыСортировки Цикл
		ТаблицыПоПрефиксам.Добавить(ТаблицаСортировки.СкопироватьКолонки());
	КонецЦикла;

	Возврат ТаблицыПоПрефиксам;

КонецФункции

Функция ИмяОбъекта(ЗначениеТега)

	ИмяОбъекта = ЗначениеТега;
	
	ПозицияТочки = СтрНайти(ИмяОбъекта, ".");
	Если ПозицияТочки > 0 Тогда
		ИмяОбъекта = Сред(ИмяОбъекта, ПозицияТочки + 1);
	КонецЕсли;

	Возврат ИмяОбъекта;

КонецФункции

Функция ИндексТаблицыПоПрефиксу(ИмяОбъекта, ПрефиксыСортировки)

	ИндексТаблицы = 0;

	Для НомерПрефикса = 1 По ПрефиксыСортировки.Количество() Цикл
		Если СтрНачинаетсяС(ИмяОбъекта, ПрефиксыСортировки[НомерПрефикса - 1]) Тогда
			ИндексТаблицы = НомерПрефикса;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ИндексТаблицы;

КонецФункции
