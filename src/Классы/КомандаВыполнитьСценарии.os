///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды <exec-rules>
//
// (с) BIA Technologies, LLC
//
///////////////////////////////////////////////////////////////////////////////

#Использовать gitrunner

Перем Лог;
Перем РепозиторийGit;

///////////////////////////////////////////////////////////////////////////////

Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт
	
	// Добавление параметров команды
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КаталогРепозитория",
		"Каталог анализируемого репозитория");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-source-dir",
		"Каталог расположения исходных файлов относительно корня репозитория. 
		| Если сценариев несколько,  указываются в кавычках через , . По умолчанию <src>");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-rules",
		"Перечень правил для применения. Если сценариев несколько,  указываются в кавычках через ,");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-cfg-file",
		"Путь к конфигурационному файлу с настройками. Если не указан, используются настройки репозитория либо глобальные");
	
КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
//
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	
	Лог = Приложение.ПолучитьЛог();
    	НастройкиИБ = Приложение.ПолучитьНастройкиИБ();
    
	КаталогРепозитория = ПараметрыКоманды["КаталогРепозитория"];
	ФайлКаталогРепозитория = Новый Файл(КаталогРепозитория);
	КаталогРепозитория = ФайлКаталогРепозитория.ПолноеИмя;
	Если НЕ ФайлКаталогРепозитория.Существует() ИЛИ ФайлКаталогРепозитория.ЭтоФайл() Тогда
		
		Лог.Ошибка("Каталог репозитория '%1' не существует или это файл", КаталогРепозитория);
		Возврат Приложение.РезультатыКоманд().НеверныеПараметры;
		
	КонецЕсли;
	
	АдресПоискаКонфигурационногоФайла = ПараметрыКоманды["-cfg-file"];
	Если Не ЗначениеЗаполнено(АдресПоискаКонфигурационногоФайла) Тогда
		АдресПоискаКонфигурационногоФайла = КаталогРепозитория;
	КонецЕсли;
	
	ПараметрКаталогиИсходныхФайлов = ПараметрыКоманды["-source-dir"];
	Если Не ЗначениеЗаполнено(ПараметрКаталогиИсходныхФайлов) Тогда
		ПараметрКаталогиИсходныхФайлов = "src";
	КонецЕсли;
	КаталогиИсходныхФайлов = СтрРазделить(ПараметрКаталогиИсходныхФайлов, ",", Ложь);
	
	ОбрабатываемыеФайлы = Новый Массив();
	КаталогиИсходныхПоФайлам = Новый Соответствие();
	Для Каждого КаталогИсходныхФайлов Из КаталогиИсходныхФайлов Цикл
		
		ТекущийКаталогИсходныхФайлов = ОбъединитьПути(КаталогРепозитория, СокрЛП(КаталогИсходныхФайлов));
		ФайлТекущийКаталогИсходныхФайлов = Новый Файл(ТекущийКаталогИсходныхФайлов);
		ТекущийКаталогИсходныхФайлов = ФайлТекущийКаталогИсходныхФайлов.ПолноеИмя;
		Если Не ФайлТекущийКаталогИсходныхФайлов.Существует() Тогда
			
			Лог.Ошибка("Каталога <%1> не существует", ТекущийКаталогИсходныхФайлов);
			
		КонецЕсли;
		
		ОбрабатываемыеФайлыКаталога = НайтиФайлы(ТекущийКаталогИсходныхФайлов, ПолучитьМаскуВсеФайлы(), Истина);
		Для Каждого ОбрабатываемыйФайлКаталога Из ОбрабатываемыеФайлыКаталога Цикл
			
			ОбрабатываемыеФайлы.Добавить(ОбрабатываемыйФайлКаталога);
			КаталогиИсходныхПоФайлам.Вставить(ОбрабатываемыйФайлКаталога.ПолноеИмя, ТекущийКаталогИсходныхФайлов);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИменаЗагружаемыхСценариев = Неопределено;
	ПараметрИменаЗагружаемыхСценариев = ПараметрыКоманды["-rules"];
	ЗатребованныеСценарии = Новый Массив;
	
	Если ЗначениеЗаполнено(ПараметрИменаЗагружаемыхСценариев) Тогда
		ПараметрИменаЗагружаемыхСценариев = СтрЗаменить(ПараметрИменаЗагружаемыхСценариев, " ", "");
		ИменаЗагружаемыхСценариев = СтрРазделить(ПараметрИменаЗагружаемыхСценариев, ",", Ложь);
		
		// Остаются только имена, чтобы сравнивать в сценариях по имени 
		ЗатребованныеСценарии = СтрРазделить(СтрЗаменить(ПараметрИменаЗагружаемыхСценариев, ".os", ""), ",", Ложь);

	КонецЕсли;
	
	УправлениеНастройками = МенеджерНастроек.НастройкиРепозитория(АдресПоискаКонфигурационногоФайла);
	НаборНастроек = СценарииОбработки.ПолучитьСценарииСПараметрамиВыполнения(КаталогРепозитория, ИменаЗагружаемыхСценариев);
	КритичныеОшибки = Новый Массив;
	
	ПараметрыОбработки = СценарииОбработки.ПолучитьСтандартныеПараметрыОбработки();
	ПараметрыОбработки.Лог = Лог;
	ПараметрыОбработки.НастройкиИБ = НастройкиИБ;
	
	Ит = 0;
	Пока Ит < ОбрабатываемыеФайлы.Количество() Цикл
		
		АнализируемыйФайл = ОбрабатываемыеФайлы[Ит];
		
		Если АнализируемыйФайл.ЭтоКаталог() Тогда
			Ит = Ит + 1;
			Продолжить;
		КонецЕсли;
		
		Лог.Информация("Анализируется файл <%1>", АнализируемыйФайл.ПолноеИмя);
		
		ИмяФайла = ФайловыеОперации.ПолучитьНормализованныйОтносительныйПуть(КаталогРепозитория,
				СтрЗаменить(АнализируемыйФайл.ПолноеИмя, КаталогРепозитория, ""));
		
		ИмяПроекта = МенеджерНастроек.ИмяПроектаДляФайла(ИмяФайла);
		
		НастройкаОбработки = НаборНастроек[ИмяПроекта];
		
		Если НЕ ЗначениеЗаполнено(НастройкаОбработки) Тогда
			
			ВызватьИсключение СтрШаблон("Не удалось получить настройки для %1", ИмяФайла);
			
		КонецЕсли;
		
		ПараметрыОбработки.Настройки = НастройкаОбработки.НастройкиСценариев.Получить("НастройкиСценариев");
		ПараметрыОбработки.КаталогРепозитория = КаталогРепозитория;
		ПараметрыОбработки.ТекущийКаталогИсходныхФайлов = КаталогиИсходныхПоФайлам.Получить(АнализируемыйФайл.ПолноеИмя);
		ПараметрыОбработки.ЗатребованныеСценарии = ЗатребованныеСценарии;

		Для Каждого СценарийОбработки Из НастройкаОбработки.СценарииОбработки Цикл
			
			Попытка
				ФайлОбработан = СценарийОбработки.ОбработатьФайл(АнализируемыйФайл,
						ПараметрыОбработки.ТекущийКаталогИсходныхФайлов,
						ПараметрыОбработки);
				
				Если НЕ ФайлОбработан Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ФайлДляДопОбработки Из ПараметрыОбработки.ФайлыДляПостОбработки Цикл
					
					НовыйОбрабатываемыйФайл = ФайловыеОперации.НовыйФайл(ФайлДляДопОбработки);
					ОбрабатываемыеФайлы.Добавить(НовыйОбрабатываемыйФайл);
					КаталогиИсходныхПоФайлам.Вставить(НовыйОбрабатываемыйФайл.ПолноеИмя, ПараметрыОбработки.ТекущийКаталогИсходныхФайлов);
					
				КонецЦикла;
				
				ПараметрыОбработки.ФайлыДляПостОбработки.Очистить();
				
			Исключение
				
				Ошибка = ОписаниеОшибки();
				КритичныеОшибки.Добавить(Ошибка);
				Лог.Информация("Критичная ошибка: %1", Ошибка);
				
			КонецПопытки;
			
		КонецЦикла;
		
		Ит = Ит + 1;
		
	КонецЦикла;
	
	// В отличие от прекоммита, здесь лучше вывести все криты в конце одним блоком еще раз.
	Если КритичныеОшибки.Количество() Тогда
		
		Лог.Ошибка("В результате выполнения возникли исключения:");
		
		Для Каждого ОписаниеОшибки Из КритичныеОшибки Цикл
			
			Лог.Ошибка(ОписаниеОшибки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
	
КонецФункции // ВыполнитьКоманду
