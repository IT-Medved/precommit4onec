///////////////////////////////////////////////////////////////////////////////
// 
// Служебный модуль с реализацией сценариев обработки файлов <СортировкаДереваМетаданных>
//
///////////////////////////////////////////////////////////////////////////////

// ИмяСценария
//	Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//   Строка   - Имя текущего сценария обработки файлов
//
Функция ИмяСценария() Экспорт
	
	Возврат "СортировкаСоставаПодсистем";
	
КонецФункции // ИмяСценария()

// ОбработатьФайл
//	Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать 
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//   Булево   - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	НастройкиСценария = ДополнительныеПараметры.Настройки.Получить(ИмяСценария());

	Если АнализируемыйФайл.Существует() Тогда
		
		Если ТипыФайлов.ЭтоФайлОписанияПодсистемы(АнализируемыйФайл) ИЛИ 
			ТипыФайлов.ЭтоФайлОписанияПодсистемыEDT(АнализируемыйФайл) Тогда
		
			Лог.Информация("Обработка файла '%1' по сценарию '%2'", АнализируемыйФайл.ПолноеИмя, ИмяСценария());
			ЭтоЕДТ = ТипыФайлов.ЭтоФайлОписанияПодсистемыEDT(АнализируемыйФайл);

			Если ОтсортироватьПодсистему(АнализируемыйФайл.ПолноеИмя, ЭтоЕДТ)  Тогда
				
				ДополнительныеПараметры.ИзмененныеКаталоги.Добавить(АнализируемыйФайл.ПолноеИмя);
				
			КонецЕсли;
			
			Возврат Истина;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЛОЖЬ;
	
КонецФункции // ОбработатьФайл()

Функция ОтсортироватьПодсистему(Знач ИмяФайла, ЭтоЕДТ)

	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ИмяФайла);
	
	ПоискДочерних = ?(ЭтоЕДТ, "(?:<content>)([\w\W]+)(?:<\/content>)", "(<Content>\s+)(<[\w\W]+>)(\s+<\/Content>)");
	Регексп = Новый РегулярноеВыражение(ПоискДочерних);
	Регексп.ИгнорироватьРегистр = ИСТИНА;
	Регексп.Многострочный = ИСТИНА;
	ПодчиненныеМетаданные = Регексп.НайтиСовпадения(СодержимоеФайла);
	
	Если ПодчиненныеМетаданные.Количество() = 0 Тогда
		
		Возврат Ложь;	
		
	КонецЕсли;
	
	ИсходнаяСтрока = ПодчиненныеМетаданные[0].Группы[0].Значение;
	
	//Тип.Объект или GUID
	ПоискМетаданных = ?(ЭтоЕДТ, "^\s*<[\w]+>(?:([a-zA-Z]+)\.([а-яa-zA-ZА-Я0-9_]+)|(([a-zA-z0-9\-]+)))<\/[\w]+>", "^\s+<[\w:\s=""]+>(?:([a-zA-Z0-9_]+).([а-яa-zA-ZА-Я0-9_]+)|(([a-zA-z0-9\-]+)))<\/[\w:]+>");
	РегекспМетаданные = Новый РегулярноеВыражение(ПоискМетаданных);
	РегекспМетаданные.ИгнорироватьРегистр = Истина;
	РегекспМетаданные.Многострочный = Истина;
	ОбъектыМетаданныхСтроки = РегекспМетаданные.НайтиСовпадения(ИсходнаяСтрока);

	ОбъектыТипаПоПорядку = Новый СписокЗначений; // отдельный список с типами, нужен для того, чтобы сохранить порядок при обходе соответствия

	ОбъектыМетаданных = Новый Соответствие;
	ПоследнийТип = "";
	ОбъектыТипа = Новый СписокЗначений;
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданныхСтроки Цикл
		
		Список = ОбъектыМетаданных.Получить(ОбъектМетаданных.Группы[1].Значение);

		Если Список = Неопределено Тогда
			Список =  Новый СписокЗначений;
			ОбъектыМетаданных.Вставить(ОбъектМетаданных.Группы[1].Значение, Список);
			ОбъектыТипаПоПорядку.Добавить(ОбъектМетаданных.Группы[1].Значение);
		КонецЕсли;
	
		Если Список.НайтиПоЗначению(ОбъектМетаданных.Группы[0].Значение) = Неопределено Тогда 
			Список.Добавить(ОбъектМетаданных.Группы[0].Значение, ОбъектМетаданных.Группы[2].Значение);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаЗамены = "";

	Для Каждого Тип Из ОбъектыТипаПоПорядку Цикл

		ОбъектМетаданных = ОбъектыМетаданных.Получить(Тип.Значение);

		ОбъектМетаданных.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		СтрокаЗамены = СтрокаЗамены + ?(ПустаяСтрока(СтрокаЗамены), "", Символы.ПС) 
						+ СтрСоединить(ОбъектМетаданных.ВыгрузитьЗначения(), Символы.ПС);
		
	КонецЦикла;
	
	Если НЕ ЭтоЕДТ Тогда
		СтрокаЗамены = ПодчиненныеМетаданные[0].Группы[1].Значение + СокрЛП(СтрокаЗамены) +  ПодчиненныеМетаданные[0].Группы[3].Значение; 
	КонецЕсли;

	Если СтрСравнить(ИсходнаяСтрока, СтрокаЗамены) = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЭтоЕДТ Тогда 
		СодержимоеФайла = Регексп.Заменить(СодержимоеФайла, СокрЛП(СтрокаЗамены));
	Иначе
		СодержимоеФайла = Регексп.Заменить(СодержимоеФайла, СтрокаЗамены);
	КонецЕсли;
	
	ФайловыеОперации.ЗаписатьТекстФайла(ИмяФайла, СодержимоеФайла);
	
	Возврат Истина;
	
КонецФункции