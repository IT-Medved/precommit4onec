///////////////////////////////////////////////////////////////////////////////
// 
// Служебный модуль с реализацией сценариев обработки файлов <СортировкаДереваМетаданных>
//
///////////////////////////////////////////////////////////////////////////////

// ИмяСценария
//	Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//   Строка   - Имя текущего сценария обработки файлов
//
Функция ИмяСценария() Экспорт
	
	Возврат "СортировкаСоставаПодсистем";
	
КонецФункции // ИмяСценария()

// ОбработатьФайл
//	Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать 
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//   Булево   - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	НастройкиСценария = ДополнительныеПараметры.Настройки.Получить(ИмяСценария());
	ФайлОбработан = Ложь;

	Если АнализируемыйФайл.Существует() Тогда
		
		Если ТипыФайлов.ЭтоФайлОписанияПодсистемы(АнализируемыйФайл) 
				ИЛИ ТипыФайлов.ЭтоФайлОписанияПодсистемыEDT(АнализируемыйФайл) Тогда
		
			Лог.Информация("Обработка файла '%1' по сценарию '%2'", АнализируемыйФайл.ПолноеИмя, ИмяСценария());
			ЭтоЕДТ = ТипыФайлов.ЭтоФайлОписанияПодсистемыEDT(АнализируемыйФайл);

			ФайлОбработан = ОтсортироватьПодсистему(АнализируемыйФайл.ПолноеИмя, ЭтоЕДТ);
			
			Если ФайлОбработан Тогда
				ДополнительныеПараметры.ИзмененныеКаталоги.Добавить(АнализируемыйФайл.ПолноеИмя);
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФайлОбработан;
	
КонецФункции // ОбработатьФайл()

Функция ОтсортироватьПодсистему(Знач ИмяФайла, ЭтоЕДТ)

	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ИмяФайла);

	РегекспСостав = РегекспСостав(ЭтоЕДТ);
	СовпаденияСостава = РегекспСостав.НайтиСовпадения(СодержимоеФайла);
	Если СовпаденияСостава.Количество() = 0 Тогда
		Возврат Ложь;	
	КонецЕсли;
	СовпадениеСостава = СовпаденияСостава[0];
	
	СтрокаПоискаМетаданных = ?(ЭтоЕДТ,
		СовпадениеСостава.Группы[0].Значение,  // Всё совпадение (нет общего тега)
		СовпадениеСостава.Группы[1].Значение); // Текст внутри общего тега Content
	СовпаденияМетаданных = РегекспМетаданные().НайтиСовпадения(СтрокаПоискаМетаданных);

	ТаблицаСостава = Новый ТаблицаЗначений;
	ТаблицаСостава.Колонки.Добавить("СтрокаСостава");

	Для Каждого СовпадениеМетаданных Из СовпаденияМетаданных Цикл
		
		Если СтрНайти(СовпадениеМетаданных.Группы[1].Значение, "-") > 0 Тогда // Значение тега (имя метаданных), вероятно это UID (битая ссылка)
			Продолжить;
		КонецЕсли;

		ТаблицаСостава.Добавить().СтрокаСостава = СовпадениеМетаданных.Группы[0].Значение;

	КонецЦикла;

	ТаблицаСостава.Сортировать("СтрокаСостава");
	ТаблицаСостава.Свернуть("СтрокаСостава");
	
	РазделительЭлементов = ?(ЭтоЕДТ,
		Символы.ПС + "  ",
		Символы.ПС + "				");
	СтрокаЗамены = СтрСоединить(ТаблицаСостава.ВыгрузитьКолонку("СтрокаСостава"), РазделительЭлементов);
	
	Если ЗначениеЗаполнено(СтрокаЗамены) Тогда

		СтрокаЗамены = РазделительЭлементов + СтрокаЗамены;
		
		Если Не ЭтоЕДТ Тогда
			СтрокаЗамены = СтрШаблон(
				"
				|			<Content>%1
				|			</Content>",
				СтрокаЗамены);
		КонецЕсли;

	ИначеЕсли Не ЭтоЕДТ Тогда

		СтрокаЗамены =
			"
			|			<Content/>";

	КонецЕсли;

	СтрокаЗамены = СтрокаЗамены + Символы.ПС;

	ИсходнаяСтрока = СовпадениеСостава.Группы[0].Значение; // Всё совпадение, которое будем заменять
	Если СтрСравнить(ИсходнаяСтрока, СтрокаЗамены) = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	СодержимоеФайла = РегекспСостав.Заменить(СодержимоеФайла, СтрокаЗамены);
	ФайловыеОперации.ЗаписатьТекстФайла(ИмяФайла, СодержимоеФайла);
	
	Возврат Истина;
	
КонецФункции

Функция РегекспСостав(ЭтоЕДТ)
	
	ПоискСостава = ?(ЭтоЕДТ,
		"\s*<content>[\w\W]+<\/content>[\t ]*\n*",
		"\s*<Content>([\w\W]+)<\/Content>[\t ]*\n*");
	Регексп = Новый РегулярноеВыражение(ПоискСостава);
	Регексп.ИгнорироватьРегистр = Истина;
	Регексп.Многострочный = Истина;

	Возврат Регексп;

КонецФункции

Функция РегекспМетаданные() 

	ПоискМетаданных = "<[^>]+>([^<]*)<\/[^>]+>"; // Разбивка по тегам
	Регексп = Новый РегулярноеВыражение(ПоискМетаданных);
	Регексп.ИгнорироватьРегистр = Истина;
	Регексп.Многострочный = Истина;

	Возврат Регексп;
КонецФункции
