///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией сценариев обработки файлов <ПроверкаКорректностиИнструкцийПрепроцессора>
//
///////////////////////////////////////////////////////////////////////////////

Перем Лог;

// ИмяСценария
//	Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//   Строка   - Имя текущего сценария обработки файлов
//
Функция ИмяСценария() Экспорт
	
	Возврат "ПроверкаКорректностиИнструкцийПрепроцессора";
	
КонецФункции // ИмяСценария()

// ОбработатьФайл
//	Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//   Булево   - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	НастройкиСценария = ДополнительныеПараметры.Настройки.Получить(ИмяСценария());
	Если АнализируемыйФайл.Существует() И ТипыФайлов.ЭтоФайлИсходников(АнализируемыйФайл) Тогда
		
		Лог.Информация("Обработка файла '%1' по сценарию '%2'", АнализируемыйФайл.ПолноеИмя, ИмяСценария());
		
		ПроверитьНаКорректностьИнструкций(АнализируемыйФайл.ПолноеИмя);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ОбработатьФайл()

Процедура ПроверитьНаКорректностьИнструкций(ПутьКФайлуМодуля)
	
	МассивКлючевыхСлов = ПолучитьМассивИнструкций();
	
	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ПутьКФайлуМодуля);
	
	ТекстРазбора = Новый ТекстовыйДокумент;
	ТекстРазбора.УстановитьТекст(СодержимоеФайла);
	ВсегоСтрок = ТекстРазбора.КоличествоСтрок();
	
	ШаблонПоиска = Новый РегулярноеВыражение("^[\t ]*?#[\t ]*?(?:(?:Если+?)|(?:КонецЕсли)|)[\t\n ]+?");
	ШаблонПоиска.Многострочный = Истина;
	ШаблонПоиска.ИгнорироватьРегистр = Истина;
	
	Совпадения = ШаблонПоиска.НайтиСовпадения(СодержимоеФайла);
	
	// Инструкций нет вообще
	Если Совпадения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Уровень = 0;
	Для Каждого Совпадение Из Совпадения Цикл
		
		Инструкция = СтрЗаменить(Нрег(СокрЛП(Совпадение.Группы[0].Значение)), "#", "");
		
		Если Инструкция = "если" Тогда
			Уровень = Уровень + 1;
		ИначеЕсли Инструкция = "конецесли" Тогда
			Уровень = Уровень - 1;
		КонецЕсли;
		
		Если Уровень < 0 Тогда
			НомерСтроки = СтрЧислоСтрок(Лев(СодержимоеФайла, Совпадение.Индекс));
			ТекстОшибки = СтрШаблон("'%1' ошибки в порядке #Если и #КонецЕсли стр. '%2'", ПутьКФайлуМодуля, НомерСтроки);
			Лог.Ошибка(ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Уровень <> 0 Тогда
		ТекстОшибки = СтрШаблон("'%1' ошибки в парности #Если и #КонецЕсли.", ПутьКФайлуМодуля);
		Лог.Ошибка(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Для Ит = 1 По ВсегоСтрок Цикл
		
		СтрокаМодуля = СокрЛ(ТекстРазбора.ПолучитьСтроку(Ит));
		
		ЕстьИнструкция = СтрНачинаетсяС(СтрокаМодуля, "#") И НЕ СтрНачинаетсяС(СтрокаМодуля, "#Область");
		
		Если НЕ ЕстьИнструкция Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаМодуля = Прав(СтрокаМодуля, СтрДлина(СтрокаМодуля) - 1);
		
		МассивПодстрок = СтрРазделить(СтрокаМодуля, " ()", Ложь);
		
		Для Каждого Инструкция Из МассивПодстрок Цикл
			
			Если МассивКлючевыхСлов.Найти(НРег(Инструкция)) = Неопределено Тогда
				
				ТекстОшибки = СтрШаблон("'%1' ошибка в написании инструкции '%2' стр. '%3'", ПутьКФайлуМодуля, Инструкция, Ит);
				Лог.Ошибка(ТекстОшибки);
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьМассивИнструкций()
	
	МассивКлючевыхСлов = Новый Массив();
	
	МассивКлючевыхСлов.Добавить("если");
	МассивКлючевыхСлов.Добавить("тогда");
	МассивКлючевыхСлов.Добавить("иначеесли");
	МассивКлючевыхСлов.Добавить("иначе");
	МассивКлючевыхСлов.Добавить("конецесли");
	МассивКлючевыхСлов.Добавить("наклиенте");
	МассивКлючевыхСлов.Добавить("насервере");
	МассивКлючевыхСлов.Добавить("сервер");
	МассивКлючевыхСлов.Добавить("клиент");
	МассивКлючевыхСлов.Добавить("мобильноеприложениеклиент");
	МассивКлючевыхСлов.Добавить("мобильноеприложениесервер");
	МассивКлючевыхСлов.Добавить("толстыйклиентобычноеприложение");
	МассивКлючевыхСлов.Добавить("толстыйклиентуправляемоеприложение");
	МассивКлючевыхСлов.Добавить("внешнеесоединение");
	МассивКлючевыхСлов.Добавить("тонкийклиент");
	МассивКлючевыхСлов.Добавить("вебклиент");
	МассивКлючевыхСлов.Добавить("конецобласти");
	МассивКлючевыхСлов.Добавить("и");
	МассивКлючевыхСлов.Добавить("или");
	МассивКлючевыхСлов.Добавить("не");
	
	Возврат МассивКлючевыхСлов;
	
КонецФункции
