///////////////////////////////////////////////////////////////////////////////
// 
// Служебный модуль с реализацией сценария обработки файлов <СортировкаСостава>
//
///////////////////////////////////////////////////////////////////////////////

// Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//  Строка - Имя текущего сценария обработки файлов
Функция ИмяСценария() Экспорт
	Возврат "СортировкаСостава";
КонецФункции

// Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать 
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//  Булево - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт

	ФайлОбработан = Ложь;

	Если АнализируемыйФайл.Существует() Тогда

		НастройкиСценария = ДополнительныеПараметры.Настройки.Получить(ИмяСценария());
		ПараметрыСортировки = ПараметрыСортировки(АнализируемыйФайл, НастройкиСценария);
		Если ЗначениеЗаполнено(ПараметрыСортировки) Тогда

			ПолноеИмяФайла = АнализируемыйФайл.ПолноеИмя;
			ДополнительныеПараметры.Лог.Информация("Обработка файла '%1' по сценарию '%2'", ПолноеИмяФайла, ИмяСценария());

			ФайлОбработан = СортироватьСостав(ПолноеИмяФайла, ПараметрыСортировки);

			Если ФайлОбработан Тогда
				ДополнительныеПараметры.ИзмененныеКаталоги.Добавить(ПолноеИмяФайла);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ФайлОбработан;

КонецФункции

Функция ПараметрыСортировки(АнализируемыйФайл, НастройкиСценария)

	Результат = Новый Структура();

	ОпределитьОбрабатываемыйОбъект(Результат, АнализируемыйФайл, НастройкиСценария);

	Если ЗначениеЗаполнено(Результат) Тогда

		ОпределитьСтруктуруСостава(Результат);
		ОпределитьШаблоныПоиска(Результат);

	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ОпределитьОбрабатываемыйОбъект(ПараметрыСортировки, АнализируемыйФайл, НастройкиСценария)

	Объекты = ОбрабатываемыеОбъекты();
	
	ОбрабатываемыйОбъект = "";
	
	ЭтоЕДТ = ТипыФайлов.ЭтоФайлОписанияКонфигурацииEDT(АнализируемыйФайл);
	Если ЭтоЕДТ Или ТипыФайлов.ЭтоФайлОписанияКонфигурации(АнализируемыйФайл) Тогда

		ОбрабатываемыйОбъект = Объекты.Конфигурация;

	ИначеЕсли ТипыФайлов.ЭтоФайлОписанияОпределяемогоТипа(АнализируемыйФайл) Тогда

		ОбрабатываемыйОбъект = Объекты.ОпределяемыйТип;
		ЭтоЕДТ = ТипыФайлов.ЭтоФайлОписанияОпределяемогоТипаEDT(АнализируемыйФайл);

	ИначеЕсли ТипыФайлов.ЭтоФайлОписанияПланаОбмена(АнализируемыйФайл) Тогда

		ОбрабатываемыйОбъект = Объекты.ПланОбмена;
		ЭтоЕДТ = ТипыФайлов.ЭтоФайлОписанияПланаОбменаEDT(АнализируемыйФайл);

	ИначеЕсли ТипыФайлов.ЭтоФайлОписанияФункциональнойОпции(АнализируемыйФайл) Тогда

		ОбрабатываемыйОбъект = Объекты.ФункциональнаяОпция;
		ЭтоЕДТ = ТипыФайлов.ЭтоФайлОписанияФункциональнойОпцииEDT(АнализируемыйФайл);

	ИначеЕсли ТипыФайлов.ЭтоФайлОписанияПодсистемы(АнализируемыйФайл) Тогда

		ОбрабатываемыйОбъект = Объекты.Подсистема;
		ЭтоЕДТ = ТипыФайлов.ЭтоФайлОписанияПодсистемыEDT(АнализируемыйФайл);

	КонецЕсли;

	Если ЗначениеЗаполнено(ОбрабатываемыйОбъект) Тогда
		
		ОтключенныеОбъекты = ОтключенныеОбъекты(НастройкиСценария);
		Если ОтключенныеОбъекты.Найти(НРег(ОбрабатываемыйОбъект)) = Неопределено Тогда

			ПараметрыСортировки.Вставить("ОбрабатываемыйОбъект", ОбрабатываемыйОбъект);
			ПараметрыСортировки.Вставить("ЭтоЕДТ",               ЭтоЕДТ);
			ПараметрыСортировки.Вставить("ПрефиксыСортировки",   ПрефиксыСортировки(НастройкиСценария));
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ОбрабатываемыеОбъекты()

	Результат = Новый Структура();

	Результат.Вставить("Конфигурация");
	Результат.Вставить("ОпределяемыйТип");
	Результат.Вставить("ПланОбмена");
	Результат.Вставить("ФункциональнаяОпция");
	Результат.Вставить("Подсистема");

	Для каждого Элемент Из Результат Цикл
		Результат[Элемент.Ключ] = Элемент.Ключ;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ОтключенныеОбъекты(НастройкиСценария)
	Возврат НормализованныйМассивИзНастроек(НастройкиСценария, "ОтключенныеОбъекты", Истина, Истина);
КонецФункции

Функция ПрефиксыСортировки(НастройкиСценария)
	Возврат НормализованныйМассивИзНастроек(НастройкиСценария, "УчитываяПрефикс", Истина, Ложь);
КонецФункции

Функция НормализованныйМассивИзНастроек(НастройкиСценария, ИмяНастройки, СократитьПробелы, ВНижнийРегистр)

	Результат = Новый Массив();

	ЗначениеНастройки = НастройкиСценария.Получить(ИмяНастройки);
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда

		Если ТипЗнч(ЗначениеНастройки) <> Тип("Массив") Тогда
			ЗначениеНастройки = СтрРазделить(Строка(ЗначениеНастройки), ",", Ложь);
		КонецЕсли;

		Для Каждого Элемент Из ЗначениеНастройки Цикл

			Если Не ЗначениеЗаполнено(Элемент) Тогда
				Продолжить;
			КонецЕсли;

			Если СократитьПробелы Тогда
				Элемент = СокрЛП(Элемент);
			КонецЕсли;

			Если ВНижнийРегистр Тогда
				Элемент = НРег(Элемент);
			КонецЕсли;

			Результат.Добавить(Элемент);

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ОпределитьСтруктуруСостава(ПараметрыСортировки)

	Объекты = ОбрабатываемыеОбъекты();
	
	ОбрабатываемыйОбъект = ПараметрыСортировки.ОбрабатываемыйОбъект;
	ЭтоЕДТ               = ПараметрыСортировки.ЭтоЕДТ;

	СтруктураСостава = Новый Структура();
	СтруктураСостава.Вставить("ИмяЭлемента");
	СтруктураСостава.Вставить("РазделительЭлементов");
	СтруктураСостава.Вставить("ЭлементИмеетАтрибуты",        Ложь);
	СтруктураСостава.Вставить("ИмяВложенногоЭлемента",       "");
	СтруктураСостава.Вставить("ИмяРодительскогоЭлемента",    "");
	СтруктураСостава.Вставить("ОтступРодительскогоЭлемента", "");

	Если ЭтоЕДТ Тогда

		СтруктураСостава.ИмяЭлемента          = "content";
		СтруктураСостава.РазделительЭлементов = Символы.ПС + "  ";

		Если ОбрабатываемыйОбъект = Объекты.Конфигурация Тогда

			СтруктураСостава.ИмяЭлемента = "%1"; // будет подставляться для каждого типа объектов метаданных

		ИначеЕсли ОбрабатываемыйОбъект = Объекты.ОпределяемыйТип Тогда

			СтруктураСостава.ИмяЭлемента          = "types";
			СтруктураСостава.РазделительЭлементов = Символы.ПС + "    ";

		ИначеЕсли ОбрабатываемыйОбъект = Объекты.ПланОбмена Тогда

			СтруктураСостава.ИмяВложенногоЭлемента = "mdObject";

		КонецЕсли;

	Иначе

		СтруктураСостава.РазделительЭлементов = Символы.ПС + "				";
		
		Если ОбрабатываемыйОбъект = Объекты.Конфигурация Тогда

			СтруктураСостава.ИмяЭлемента          = "%1"; // будет подставляться для каждого типа объектов метаданных
			СтруктураСостава.РазделительЭлементов = Символы.ПС + "			";

			СтруктураСостава.ИмяРодительскогоЭлемента    = "ChildObjects";
			СтруктураСостава.ОтступРодительскогоЭлемента = "		";

		ИначеЕсли ОбрабатываемыйОбъект = Объекты.ОпределяемыйТип Тогда

			СтруктураСостава.ИмяЭлемента = "v8:Type";

		ИначеЕсли ОбрабатываемыйОбъект = Объекты.ПланОбмена Тогда

			СтруктураСостава.ИмяЭлемента           = "Item";
			СтруктураСостава.РазделительЭлементов  = Символы.ПС + "	";

			СтруктураСостава.ИмяВложенногоЭлемента = "Metadata";

		ИначеЕсли ОбрабатываемыйОбъект = Объекты.ФункциональнаяОпция Тогда

			СтруктураСостава.ИмяЭлемента                 = "xr:Object";

			СтруктураСостава.ИмяРодительскогоЭлемента    = "Content";
			СтруктураСостава.ОтступРодительскогоЭлемента = "			";

		ИначеЕсли ОбрабатываемыйОбъект = Объекты.Подсистема Тогда

			СтруктураСостава.ИмяЭлемента                 = "xr:Item";
			СтруктураСостава.ЭлементИмеетАтрибуты        = Истина;

			СтруктураСостава.ИмяРодительскогоЭлемента    = "Content";
			СтруктураСостава.ОтступРодительскогоЭлемента = "			";

		КонецЕсли;

	КонецЕсли;

	Если СтруктураСостава.ИмяЭлемента = Неопределено Или СтруктураСостава.РазделительЭлементов = Неопределено Тогда
		ВызватьИсключение 
			СтрШаблон(
				"Не задано имя или разделитель элементов состава для объекта [%1] (формат %2)",
				ОбрабатываемыйОбъект,
				Формат(ЭтоЕДТ, "БЛ=конфигуратора; БИ=ЕДТ"));
	КонецЕсли;

	ПараметрыСортировки.Вставить("СтруктураСостава", СтруктураСостава);

КонецПроцедуры

Процедура ОпределитьШаблоныПоиска(ПараметрыСортировки)

	СтруктураСостава = ПараметрыСортировки.СтруктураСостава;
	
	// 1-я группа: состав объектов
	ШаблонПоискаСостава = "";
	Если ПараметрыСортировки.ОбрабатываемыйОбъект = ОбрабатываемыеОбъекты().Конфигурация И ПараметрыСортировки.ЭтоЕДТ Тогда
		ШаблонПоискаСостава = "\s*(<languages[\w\W]*)(<\/mdclass\:Configuration>)[ \t]*\n*"; // 2-я группа: завершающий блок ЕДТ
	ИначеЕсли ЗначениеЗаполнено(СтруктураСостава.ИмяРодительскогоЭлемента) Тогда
		ШаблонПоискаСостава = СтрШаблон("\s*<%1>([\w\W]*)<\/%1>[ \t]*\n*", СтруктураСостава.ИмяРодительскогоЭлемента);
	Иначе
		ШаблонПоискаСостава = СтрШаблон("\s*(<%1>[\w\W]*<\/%1>)[ \t]*\n*", СтруктураСостава.ИмяЭлемента);
	КонецЕсли;

	// 1-я группа: имя объекта состава
	ШаблонПоискаЭлементов = "";
	ТекстАтрибутов = ?(СтруктураСостава.ЭлементИмеетАтрибуты, "\s+[^>]+", "");
	Если ЗначениеЗаполнено(СтруктураСостава.ИмяВложенногоЭлемента) Тогда
		ШаблонПоискаЭлементов = СтрШаблон(
			"<%1%2>[\w\W]*?<%3>([^<]*?)<\/%3>[\w\W]*?<\/%1>",
			СтруктураСостава.ИмяЭлемента, ТекстАтрибутов, СтруктураСостава.ИмяВложенногоЭлемента);
	Иначе
		ШаблонПоискаЭлементов = СтрШаблон(
			"<%1%2>([^<]*?)<\/%1>",
			СтруктураСостава.ИмяЭлемента, ТекстАтрибутов);
	КонецЕсли;

	ПараметрыСортировки.Вставить("ШаблонПоискаСостава",   ШаблонПоискаСостава);
	ПараметрыСортировки.Вставить("ШаблонПоискаЭлементов", ШаблонПоискаЭлементов);

КонецПроцедуры

Функция СортироватьСостав(ПолноеИмяФайла, ПараметрыСортировки)

	Результат = Ложь;

	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ПолноеИмяФайла);

	ПоискСостава = РегулярныеВыражения.Создать(ПараметрыСортировки.ШаблонПоискаСостава);
	СовпаденияСостава = ПоискСостава.НайтиСовпадения(СодержимоеФайла);
	Если СовпаденияСостава.Количество() > 0 Тогда

		СовпадениеСостава = СовпаденияСостава[0];

		СортированныйСостав = СортированныйСостав(СовпадениеСостава, ПараметрыСортировки) + Символы.ПС;
	
		ИсходныйСостав = СовпадениеСостава.Группы[0].Значение;
		Если СтрСравнить(ИсходныйСостав, СортированныйСостав) <> 0 Тогда

			СодержимоеФайла = ПоискСостава.Заменить(СодержимоеФайла, СортированныйСостав);
			ФайловыеОперации.ЗаписатьТекстФайла(ПолноеИмяФайла, СодержимоеФайла);
			Результат = Истина;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция СортированныйСостав(СовпадениеСостава, ПараметрыСортировки)

	Результат = "";

	ПрефиксыСортировки = ПараметрыСортировки.ПрефиксыСортировки;
	СтруктураСостава   = ПараметрыСортировки.СтруктураСостава;

	СоставОбъектов = СовпадениеСостава.Группы[1].Значение;

	Если ПараметрыСортировки.ОбрабатываемыйОбъект = ОбрабатываемыеОбъекты().Конфигурация Тогда

		СортированныеОбъекты = Новый Массив;
		НесортируемыеТипыМетаданных = НесортируемыеТипыМетаданных();
		Для каждого ТипМетаданных Из ИменаВсехЭлементовПоПорядку(СоставОбъектов) Цикл

			СоставТипа = ВырезатьЭлемент(СоставОбъектов, ТипМетаданных, СтруктураСостава.РазделительЭлементов);

			Если НесортируемыеТипыМетаданных.Найти(НРег(ТипМетаданных)) = Неопределено Тогда
				ШаблонПоискаЭлементов = СтрШаблон(ПараметрыСортировки.ШаблонПоискаЭлементов, ТипМетаданных);

				СоставТипа = СортированныеЭлементыСостава(
					СоставТипа,
					ШаблонПоискаЭлементов,
					СтруктураСостава.РазделительЭлементов,
					ПрефиксыСортировки);
			КонецЕсли;

			СортированныеОбъекты.Добавить(СоставТипа);

		КонецЦикла;

		Результат = СтрСоединить(СортированныеОбъекты)
			+ ?(ПараметрыСортировки.ЭтоЕДТ, Символы.ПС + СовпадениеСостава.Группы[2].Значение, ""); // Завершающий блок ЕДТ

	Иначе

		Результат = СортированныеЭлементыСостава(
			СоставОбъектов,
			ПараметрыСортировки.ШаблонПоискаЭлементов,
			СтруктураСостава.РазделительЭлементов,
			ПрефиксыСортировки);

	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураСостава.ИмяРодительскогоЭлемента) Тогда
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = СтрШаблон(
				"
				|%1<%2>%3
				|%1</%2>",
				СтруктураСостава.ОтступРодительскогоЭлемента,
				СтруктураСостава.ИмяРодительскогоЭлемента,
				Результат);
		Иначе
			Результат = СтрШаблон(
				"
				|%1<%2/>",
				СтруктураСостава.ОтступРодительскогоЭлемента,
				СтруктураСостава.ИмяРодительскогоЭлемента);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ИменаВсехЭлементовПоПорядку(ТекстХМЛ)

	ПоискЭлементов = РегулярныеВыражения.Создать("<(?<name>[^>]+)[^>]*>[\w\W]*?<\/\k<name>>"); // стиль .NET

	Элементы = Новый ТаблицаЗначений;
	Элементы.Колонки.Добавить("ИмяЭлемента");
	Для каждого СовпадениеЭлемента Из ПоискЭлементов.НайтиСовпадения(ТекстХМЛ) Цикл
		Элементы.Добавить().ИмяЭлемента = СовпадениеЭлемента.Группы.ПоИмени("name").Значение;
	КонецЦикла;
	Элементы.Свернуть("ИмяЭлемента");

	Возврат Элементы.ВыгрузитьКолонку("ИмяЭлемента");

КонецФункции

Функция ВырезатьЭлемент(ТекстХМЛ, ИмяЭлемента, РазделительЭлементов = "")

	Результат = "";
	
	ПоискЭлемента = РегулярныеВыражения.Создать(СтрШаблон("\s*(<%1[^>]*>[\w\W]*?<\/%1>)[ \t]*", ИмяЭлемента));
	СовпаденияЭлемента = ПоискЭлемента.НайтиСовпадения(ТекстХМЛ);
	Если СовпаденияЭлемента.Количество() > 0 Тогда

		СтрокиЭлемента = Новый Массив;
		Для каждого СовпадениеЭлемента Из СовпаденияЭлемента Цикл
			СтрокиЭлемента.Добавить(СовпадениеЭлемента.Группы[1].Значение);
		КонецЦикла;

		Результат = РазделительЭлементов + СтрСоединить(СтрокиЭлемента, РазделительЭлементов);
		ТекстХМЛ = ПоискЭлемента.Заменить(ТекстХМЛ, "");

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция НесортируемыеТипыМетаданных()

	Результат = Новый Массив();
	Результат.Добавить("subsystems");
	Результат.Добавить("subsystem");
	Результат.Добавить("languages");
	Результат.Добавить("language");
	Возврат Результат;

КонецФункции

Функция СортированныеЭлементыСостава(СтрокаСостава, ШаблонПоискаЭлементов, РазделительЭлементов, ПрефиксыСортировки) Экспорт

	ТаблицыПоПрефиксам  = ТаблицыПоПрефиксам(ПрефиксыСортировки);
	
	ПоискЭлементов = РегулярныеВыражения.Создать(ШаблонПоискаЭлементов);
	Для Каждого СовпадениеЭлемента Из ПоискЭлементов.НайтиСовпадения(СтрокаСостава) Цикл
		
		ЗначениеЭлемента = СовпадениеЭлемента.Группы[1].Значение;
		Если СтрНайти(ЗначениеЭлемента, "-") > 0 Тогда // Вероятно это UID (битая ссылка)
			Продолжить;
		КонецЕсли;

		ИмяОбъекта = ИмяОбъекта(ЗначениеЭлемента);
		СтрокаЭлемента = СовпадениеЭлемента.Группы[0].Значение;
		ИндексТаблицы = ИндексТаблицыПоПрефиксу(ИмяОбъекта, ПрефиксыСортировки);
		СтрокаТаблицы = ТаблицыПоПрефиксам[ИндексТаблицы].Добавить();
		СтрокаТаблицы.СтрокаЭлемента = СтрокаЭлемента;
		СтрокаТаблицы.СтрокаСортировки = ЗначениеЭлемента;

	КонецЦикла;

	СортированныеЭлементыПоПрефиксами = Новый Массив();
	Для каждого ТаблицаПрефикса Из ТаблицыПоПрефиксам Цикл
		Если ТаблицаПрефикса.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаПрефикса.Сортировать("СтрокаСортировки");
		ТаблицаПрефикса.Свернуть("СтрокаЭлемента");
		СортированныеЭлементыПоПрефиксами.Добавить(СтрСоединить(ТаблицаПрефикса.ВыгрузитьКолонку("СтрокаЭлемента"), РазделительЭлементов));
	КонецЦикла;

	Результат = СтрСоединить(СортированныеЭлементыПоПрефиксами, РазделительЭлементов);
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат = РазделительЭлементов + Результат;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ТаблицыПоПрефиксам(ПрефиксыСортировки)

	ТаблицыПоПрефиксам = Новый Массив();
	
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("СтрокаЭлемента");
	ТаблицаСортировки.Колонки.Добавить("СтрокаСортировки");
	ТаблицыПоПрефиксам.Добавить(ТаблицаСортировки);
	
	Если ЗначениеЗаполнено(ПрефиксыСортировки) Тогда
		Для каждого Префикс Из ПрефиксыСортировки Цикл
			ТаблицыПоПрефиксам.Добавить(ТаблицаСортировки.СкопироватьКолонки());
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицыПоПрефиксам;

КонецФункции

Функция ИмяОбъекта(ЗначениеЭлемента)

	ИмяОбъекта = ЗначениеЭлемента;
	
	ПозицияТочки = СтрНайти(ИмяОбъекта, ".");
	Если ПозицияТочки > 0 Тогда
		ИмяОбъекта = Сред(ИмяОбъекта, ПозицияТочки + 1);
	КонецЕсли;

	Возврат ИмяОбъекта;

КонецФункции

Функция ИндексТаблицыПоПрефиксу(ИмяОбъекта, ПрефиксыСортировки)

	ИндексТаблицы = 0;

	Для НомерПрефикса = 1 По ПрефиксыСортировки.Количество() Цикл
		Если СтрНачинаетсяС(ИмяОбъекта, ПрефиксыСортировки[НомерПрефикса - 1]) Тогда
			ИндексТаблицы = НомерПрефикса;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ИндексТаблицы;

КонецФункции
