///////////////////////////////////////////////////////////////////////////////
// 
// Служебный модуль с реализацией сценариев обработки файлов <ПроверкаКорректностиОбластей>
//
///////////////////////////////////////////////////////////////////////////////

Перем Лог;

// ИмяСценария
//	Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//   Строка   - Имя текущего сценария обработки файлов
//
Функция ИмяСценария() Экспорт
	
	Возврат "ПроверкаКорректностиДирективКомпиляции";
	
КонецФункции // ИмяСценария()

// ОбработатьФайл
//	Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать 
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//   Булево   - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	НастройкиСценария = ДополнительныеПараметры.Настройки.Получить(ИмяСценария());
	Если АнализируемыйФайл.Существует() И ТипыФайлов.ЭтоФайлИсходников(АнализируемыйФайл) Тогда
		
		Лог.Информация("Обработка файла '%1' по сценарию '%2'", АнализируемыйФайл.ПолноеИмя, ИмяСценария());
		
		ПроверитьНаКорректностьДиректив(АнализируемыйФайл.ПолноеИмя);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ОбработатьФайл()

Процедура ПроверитьНаКорректностьДиректив(ПутьКФайлуМодуля) 
	
	МассивКлючевыхСлов = ПолучитьМассивДиректив();

	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ПутьКФайлуМодуля);

	ТекстРазбора = Новый ТекстовыйДокумент;
	ТекстРазбора.УстановитьТекст(СодержимоеФайла);
	ВсегоСтрок = ТекстРазбора.КоличествоСтрок();
	
	ШаблонПоиска = Новый РегулярноеВыражение("^[\t ]*?#[\t ]*?(?:(?:Если+?)|(?:КонецЕсли))[\t ]*?");
	ШаблонПоиска.Многострочный = Истина;
	ШаблонПоиска.ИгнорироватьРегистр = Истина;

	СовпаденияПоКолличеству = ШаблонПоиска.НайтиСовпадения(СодержимоеФайла);

	ШаблонПоиска = Новый РегулярноеВыражение("^\s?#Если([\W\w]+?)^\s?#КонецЕсли");
	СовпаденияПоСтруктуре = ШаблонПоиска.НайтиСовпадения(СодержимоеФайла);

	Если СовпаденияПоКолличеству.Количество() <> СовпаденияПоСтруктуре.Количество() * 2 Тогда
		
		ТекстОшибки = СтрШаблон("В файле '%1' ошибки в парности директив #Если и #КонецЕсли.", ПутьКФайлуМодуля);
		Лог.Ошибка(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;

	КонецЕсли;
	
	Для Ит = 1 По ВсегоСтрок Цикл
		
		СтрокаМодуля = СокрЛ(ТекстРазбора.ПолучитьСтроку(Ит));
		
		Если ПустаяСтрока(СтрокаМодуля) ИЛИ Не СтрНачинаетсяС(СтрокаМодуля, "#") ИЛИ СтрНачинаетсяС(СтрокаМодуля, "#Область") Тогда
			
			Продолжить;
		
		КонецЕсли;
	
		СтрокаМодуля = Прав(СтрокаМодуля, СтрДлина(СтрокаМодуля) - 1);

		МассивПодстрок = СтрРазделить(СтрокаМодуля, " ()", Ложь);
				
		Для Каждого Директива Из МассивПодстрок Цикл
					
			Если МассивКлючевыхСлов.Найти(Директива) = Неопределено Тогда
					
				ТекстОшибки = СтрШаблон("В файле '%1' ошибка в написании директивы '%2' в строке '%3'", ПутьКФайлуМодуля, Директива, Ит);
				Лог.Ошибка(ТекстОшибки);
				ВызватьИсключение ТекстОшибки;

			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивДиректив()

	МассивКлючевыхСлов = Новый Массив();

	МассивКлючевыхСлов.Добавить("Если");
	МассивКлючевыхСлов.Добавить("Тогда");
	МассивКлючевыхСлов.Добавить("ИначеЕсли");
	МассивКлючевыхСлов.Добавить("Иначе");
	МассивКлючевыхСлов.Добавить("КонецЕсли");
	МассивКлючевыхСлов.Добавить("НаКлиенте");
	МассивКлючевыхСлов.Добавить("НаСервере");
	МассивКлючевыхСлов.Добавить("Сервер");
	МассивКлючевыхСлов.Добавить("Клиент");
	МассивКлючевыхСлов.Добавить("МобильноеПриложениеКлиент");
	МассивКлючевыхСлов.Добавить("МобильноеПриложениеСервер");
	МассивКлючевыхСлов.Добавить("ТолстыйКлиентОбычноеПриложение");
	МассивКлючевыхСлов.Добавить("ТолстыйКлиентУправляемоеПриложение");
	МассивКлючевыхСлов.Добавить("ВнешнееСоединение");
	МассивКлючевыхСлов.Добавить("ТонкийКлиент");
	МассивКлючевыхСлов.Добавить("ВебКлиент");
	МассивКлючевыхСлов.Добавить("КонецОбласти");
	МассивКлючевыхСлов.Добавить("И");
	МассивКлючевыхСлов.Добавить("ИЛИ");
	МассивКлючевыхСлов.Добавить("НЕ");

	Возврат МассивКлючевыхСлов;
		
КонецФункции

