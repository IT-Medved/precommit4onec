Перем Лог;
Перем ЗаголовокЛога;

// ИмяСценария
//	Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//   Строка   - Имя текущего сценария обработки файлов
//
Функция ИмяСценария() Экспорт
	
	Возврат "ДобавлениеТестовВРасширение";
	
КонецФункции // ИмяСценария()

// ОбработатьФайл
//	Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги / файлы, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//   Булево   - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	ЗаголовокЛога = СтрШаблон("Обработка файла '%1' по сценарию '%2'", АнализируемыйФайл.ПолноеИмя, ИмяСценария());
	
	Если Не ЗначениеЗаполнено(КаталогИсходныхФайлов) Тогда
		ВызватьИсключение ЗаголовокЛога + ": не заполнен параметр 'КаталогИсходныхФайлов'";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры.КаталогРепозитория) Тогда
		ВызватьИсключение ЗаголовокЛога + ": не заполнен параметр 'ДополнительныеПараметры.КаталогРепозитория'";
	КонецЕсли;
	
	Если Не ИспользуетсяФорматEDT(КаталогИсходныхФайлов) Тогда
		
		Лог.Отладка(ЗаголовокЛога + ": это не формат EDT в каталоге исходных файлов '%1'", КаталогИсходныхФайлов);
		Возврат Ложь;
		
	КонецЕсли;

	Если Не ИспользуетсяРасширениеСТестами(ДополнительныеПараметры.КаталогРепозитория) Тогда
		
		Лог.Отладка(ЗаголовокЛога + ": нет расширения с тестами в каталоге репозитория 'tests'");
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не АнализируемыйФайл.Существует()
		Или Не ТипыФайлов.ЭтоФайлИсходников(АнализируемыйФайл)
		Или ТипыФайлов.ЭтоФайлЧастьТеста(АнализируемыйФайл, ДополнительныеПараметры.КаталогРепозитория) Тогда
		
		Лог.Отладка(ЗаголовокЛога + ": это не файл исходников проекта");
		Возврат Ложь;
		
	КонецЕсли;
	
	МетодыМодуля = МетодыМодуля(
			АнализируемыйФайл.ПолноеИмя,
			"^\s*?(?:Процедура|Функция|Procedure|Function)\s+?([а-яА-ЯёЁ0-9_\w]+?)\s*?\([^\)]*?\)\s*?(?:Экспорт|Export)");
	Если МетодыМодуля.Количество() = 0 Тогда
		
		Лог.Отладка(ЗаголовокЛога + ": нет экспортных методов в файле исходников");
		Возврат Ложь;
		
	КонецЕсли;
	
	МетаИнформацияФайла = МетаинформацияФайла(КаталогИсходныхФайлов, АнализируемыйФайл);
	Если МетаИнформацияФайла = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Лог.Информация(ЗаголовокЛога);
	
	Возврат ТестыОбновлены(ДополнительныеПараметры, МетаИнформацияФайла, МетодыМодуля);
	
КонецФункции

Функция ИспользуетсяФорматEDT(КаталогИсходныхФайлов)
	
	ФайлОписанияКонфигурации = Новый Файл(ОбъединитьПути(КаталогИсходныхФайлов, ОтносительныйПутьФайлаОписанияКонфигурацииEDT()));
	Возврат ФайлОписанияКонфигурации.Существует();
	
КонецФункции

Функция ИспользуетсяРасширениеСТестами(КаталогРепозитория)
	
	ФайлОписанияКонфигурации = Новый Файл(ОбъединитьПути(КаталогРепозитория, "tests", ОтносительныйПутьФайлаОписанияКонфигурацииEDT()));
	Возврат ФайлОписанияКонфигурации.Существует();
	
КонецФункции

Функция ОтносительныйПутьФайлаОписанияКонфигурацииEDT()
	
	Возврат ОбъединитьПути("src", "Configuration", "Configuration.mdo");

КонецФункции

Функция МетодыМодуля(ИмяФайла, Паттерн)
	
	Методы = Новый Массив();
	
	ТекстМодуля = ФайловыеОперации.ПрочитатьТекстФайла(ИмяФайла);
	Если ПустаяСтрока(ТекстМодуля) Тогда
		Возврат Методы;
	КонецЕсли;
	
	ШаблонПоиска = Новый РегулярноеВыражение(Паттерн);
	ШаблонПоиска.Многострочный = Истина;
	ШаблонПоиска.ИгнорироватьРегистр = Истина;
	Совпадения = ШаблонПоиска.НайтиСовпадения(ТекстМодуля);
	
	Для Каждого Совпадение Из Совпадения Цикл
		
		Методы.Добавить(Совпадение.Группы[1].Значение);
		
	КонецЦикла;
	
	Возврат Методы;
	
КонецФункции

Функция МетаинформацияФайла(КаталогИсходныхФайлов, АнализируемыйФайл)
	
	ФайлКаталогИсходников = Новый Файл(КаталогИсходныхФайлов);
	КраткийПуть = СтрЗаменить(АнализируемыйФайл.ПолноеИмя, ФайлКаталогИсходников.ПолноеИмя, "");
	Если СтрНачинаетсяС(КраткийПуть, ПолучитьРазделительПути()) Тогда
		КраткийПуть = Сред(КраткийПуть, 2);
	КонецЕсли;
	СоставКраткогоПутиКФайлу = СтрРазделить(КраткийПуть, ПолучитьРазделительПути());
	ОжидаемоеКоличествоУровней = 4; // src\<КаталогТипаМетаданных>\<ИмяОбъектаМетаданных>\<ФайлИсходников>
	Если СоставКраткогоПутиКФайлу.Количество() < ОжидаемоеКоличествоУровней Тогда
		
		Лог.Отладка(ЗаголовокЛога + ": неизвестное расположение в каталоге исходных файлов");
		Возврат Неопределено;
		
	КонецЕсли;
	КаталогТипаМетаданных = СоставКраткогоПутиКФайлу[1];
	
	ЭлементСписка = МетаданныеКонфигурации.КаталогиТиповМетаданных().НайтиПоЗначению(КаталогТипаМетаданных);
	Если ЭлементСписка = Неопределено Тогда
		
		Лог.Отладка(ЗаголовокЛога + ": не удалось определить тип объекта метаданных '%1'", КаталогТипаМетаданных);
		Возврат Неопределено;
		
	КонецЕсли;
	ТипМетаданных = ЭлементСписка.Представление;
	
	ЭлементСписка = МетаданныеКонфигурации.КаталогиТиповМетаданныхДляТестов().НайтиПоЗначению(КаталогТипаМетаданных);
	Если ЭлементСписка = Неопределено Тогда
		
		Лог.Отладка(ЗаголовокЛога + ": тесты не генерируются для типа метаданных '%1' ", КаталогТипаМетаданных);
		Возврат Неопределено;
		
	КонецЕсли;
	КраткоеПредставлениеТипаМетаданных = ЭлементСписка.Представление;
	
	ИмяОбъектаМетаданных = СоставКраткогоПутиКФайлу[2];
	ИмяТестовогоМодуля = СтрШаблон("%1_%2", КраткоеПредставлениеТипаМетаданных, ИмяОбъектаМетаданных);
	
	Метаинформация = Новый Структура();
	Метаинформация.Вставить("ТипМетаданных", ТипМетаданных);
	Метаинформация.Вставить("КраткоеПредставление", КраткоеПредставлениеТипаМетаданных);
	Метаинформация.Вставить("ИмяТестовогоМодуля", ИмяТестовогоМодуля);
	Метаинформация.Вставить("Глобальный", Ложь);
	Метаинформация.Вставить("Клиент", Ложь);
	Метаинформация.Вставить("Сервер", Ложь);
	
	Если ТипыФайлов.ЭтоОбщийМодуль(АнализируемыйФайл, КаталогИсходныхФайлов) Тогда
		
		// src\CommonModules\ОбщийМодуль\Module.bsl
		ФайлОписания = Новый Файл(ОбъединитьПути(АнализируемыйФайл.Путь, ИмяОбъектаМетаданных + ".mdo"));
		Если ФайлОписания.Существует() Тогда
			
			ТекстОписания = ФайловыеОперации.ПрочитатьТекстФайла(ФайлОписания.ПолноеИмя);
			Метаинформация.Глобальный = СтрНайти(ТекстОписания, "<global>true</global>") <> 0;
			Метаинформация.Клиент = СтрНайти(ТекстОписания, "<clientManagedApplication>true</clientManagedApplication>") <> 0;
			Метаинформация.Сервер = СтрНайти(ТекстОписания, "<server>true</server>") <> 0;
			
		Иначе
			
			ВызватьИсключение СтрШаблон(ЗаголовокЛога + ": не найден файл описания общего модуля");
			
		КонецЕсли;
		
	ИначеЕсли ТипыФайлов.ЭтоМодульМенеджера(АнализируемыйФайл) Тогда
		
		// src\Catalogs\Справочник\ManagerModule.bsl
		Метаинформация.Сервер = Истина;
		Метаинформация.ИмяТестовогоМодуля = СтрШаблон("%1_%2", Метаинформация.ИмяТестовогоМодуля, "ММ");
		
	ИначеЕсли ТипыФайлов.ЭтоМодульОбъекта(АнализируемыйФайл) Тогда
		
		// src\Catalogs\Справочник\ObjectModule.bsl
		Метаинформация.Сервер = Истина;
		Метаинформация.ИмяТестовогоМодуля = СтрШаблон("%1_%2", Метаинформация.ИмяТестовогоМодуля, "МО");
		
	ИначеЕсли ТипыФайлов.ЭтоМодульНабораЗаписей(АнализируемыйФайл) Тогда
		
		// src\InformationRegisters\Регистр\RecordSetModule.bsl
		Метаинформация.Сервер = Истина;
		Метаинформация.ИмяТестовогоМодуля = СтрШаблон("%1_%2", Метаинформация.ИмяТестовогоМодуля, "МНЗ");
		
	Иначе
		
		Лог.Отладка(ЗаголовокЛога + ": неподходящий тип исходного файла");
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Метаинформация;
	
КонецФункции

Функция ТестыОбновлены(ДополнительныеПараметры, МетаИнформацияФайла, Методы)
	
	ИзмененныеФайлы = Новый Массив();
	
	КаталогТестов = ОбъединитьПути(ДополнительныеПараметры.КаталогРепозитория, "tests");
	КаталогМодулей = ОбъединитьПути(КаталогТестов, "src", "CommonModules");
	
	ПутьФайлаМодуляТеста = ОбъединитьПути(КаталогМодулей, МетаИнформацияФайла.ИмяТестовогоМодуля, "Module.bsl");
	ФайлМодуляТеста = Новый Файл(ПутьФайлаМодуляТеста);
	Если Не ФайлМодуляТеста.Существует() Тогда
		
		// Добавление общего модуля в расширение.
		ФайлКаталогаМодуляТеста = Новый Файл(ФайлМодуляТеста.Путь);
		Если Не ФайлКаталогаМодуляТеста.Существует() Тогда
			СоздатьКаталог(ФайлКаталогаМодуляТеста.ПолноеИмя);
		КонецЕсли;
		
		// Описание модуля.
		ПутьФайлаОписанияТеста = ОбъединитьПути(
				КаталогМодулей,
				МетаИнформацияФайла.ИмяТестовогоМодуля,
				МетаИнформацияФайла.ИмяТестовогоМодуля + ".mdo");
		ОписаниеМодуля = СтрШаблон(
				ШаблонОписанияТеста(),
				Строка(Новый УникальныйИдентификатор()),
				МетаИнформацияФайла.ИмяТестовогоМодуля,
				XMLСтрока(МетаИнформацияФайла.Клиент),
				XMLСтрока(МетаИнформацияФайла.Сервер));
		ТекстовыйДокумент = Новый ТекстовыйДокумент();
		ТекстовыйДокумент.УстановитьТекст(ОписаниеМодуля);
		ТекстовыйДокумент.Записать(ПутьФайлаОписанияТеста, КодировкаТекста.UTF8);
		
		// Текст модуля.
		ТекстыТеста = ТекстыТеста(Методы, МетаИнформацияФайла);
		
		ТекстМодуля = СтрШаблон(
				ШаблонТестовогоМодуля(),
				СтрСоединить(ТекстыТеста.ИсполняемыеСценарии, Символы.ПС),
				СтрСоединить(ТекстыТеста.ТестовыеМетоды, Символы.ПС + Символы.ПС));
		ТекстовыйДокумент = Новый ТекстовыйДокумент();
		ТекстовыйДокумент.УстановитьТекст(ТекстМодуля);
		ТекстовыйДокумент.Записать(ПутьФайлаМодуляТеста, КодировкаТекста.UTF8);
		
		// Описание конфигурации тестов.
		ПутьФайлаОписанияРасширенияТестов = ОбъединитьПути(КаталогТестов, "src", "Configuration", "Configuration.mdo");
		ТекстОписанияРасширенияТестов = ФайловыеОперации.ПрочитатьТекстФайла(ПутьФайлаОписанияРасширенияТестов);
		ТекстОписанияРасширенияТестов = СтрЗаменить(
				ТекстОписанияРасширенияТестов,
				"</mdclass:Configuration>",
				СтрШаблон(
					"  <commonModules>CommonModule.%1</commonModules>
					|</mdclass:Configuration>",
					МетаИнформацияФайла.ИмяТестовогоМодуля));
		ФайловыеОперации.ЗаписатьТекстФайла(ПутьФайлаОписанияРасширенияТестов, ТекстОписанияРасширенияТестов);
		
		ИзмененныеФайлы.Добавить(ПутьФайлаОписанияТеста);
		ИзмененныеФайлы.Добавить(ПутьФайлаМодуляТеста);
		ИзмененныеФайлы.Добавить(ПутьФайлаОписанияРасширенияТестов);
		
		Лог.Информация("Добавлен модуль тестов '%1'", ПутьФайлаМодуляТеста);
		
	Иначе
		
		// Добавление отсутствующих сценариев в тестовый модуль.
		НовыеМетоды = НовыйМетодыМодуляТестов(ПутьФайлаМодуляТеста, МетаИнформацияФайла, Методы);
		Если НовыеМетоды.Количество() = 0 Тогда
			
			Лог.Отладка(ЗаголовокЛога + ": все экспортные методы тестов уже есть в модуле '%1'", ПутьФайлаМодуляТеста);
			Возврат Ложь;
			
		КонецЕсли;
		
		ДанныеТеста = ТекстыТеста(НовыеМетоды, МетаИнформацияФайла);
		ТекстМодуля = ФайловыеОперации.ПрочитатьТекстФайла(ПутьФайлаМодуляТеста);
		ТекстМодуля = СтрЗаменить(
				ТекстМодуля,
				"	Возврат ИсполняемыеСценарии;",
				СтрШаблон(
					"%1
					|	Возврат ИсполняемыеСценарии;", СтрСоединить(ДанныеТеста.ИсполняемыеСценарии, Символы.ПС)));
		
		ТекстМодуля = СтрЗаменить(
				ТекстМодуля,
				"#Область Тесты
				|",
				СтрШаблон(
					"#Область Тесты
					|
					|%1
					|",
					СтрСоединить(ДанныеТеста.ТестовыеМетоды, Символы.ПС + Символы.ПС)));
		
		ФайловыеОперации.ЗаписатьТекстФайла(ПутьФайлаМодуляТеста, ТекстМодуля);
		ИзмененныеФайлы.Добавить(ПутьФайлаМодуляТеста);
		Лог.Информация("Обновлен модуль тестов '%1'", ПутьФайлаМодуляТеста);
		
	КонецЕсли;
	
	Для Каждого ИмяФайла Из ИзмененныеФайлы Цикл
		ДополнительныеПараметры.ИзмененныеКаталоги.Добавить(ИмяФайла);
		ДополнительныеПараметры.ФайлыДляПостОбработки.Добавить(ИмяФайла);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ШаблонОписанияТеста()
	
	Возврат
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<mdclass:CommonModule xmlns:mdclass=""http://g5.1c.ru/v8/dt/metadata/mdclass"" uuid=""%1"">
	|  <name>%2</name>
	|  <synonym>
	|    <key>ru</key>
	|    <value>%2</value>
	|  </synonym>
	|  <clientManagedApplication>%3</clientManagedApplication>
	|  <server>%4</server>
	|</mdclass:CommonModule>";
	
КонецФункции

Функция ШаблонТестовогоМодуля()
	
	Возврат
	"/////////////////////////////////////////////////////////////////////////////////
	|// Экспортные процедуры-тесты
	|/////////////////////////////////////////////////////////////////////////////////
	|
	|#Область ТестыAPI
	|
	|// ИсполняемыеСценарии
	|// 	Сервисный метод для получения списка тестовых методов
	|// Параметры:
	|// 	ДополнительныеПараметры - Структура - Дополнительные параметры, используемые при формировании списка тестов
	|// Возвращаемое значение:
	|// 	Массив - Имена методов тестов
	|Функция ИсполняемыеСценарии(ДополнительныеПараметры = Неопределено) Экспорт
	|	
	|	ИсполняемыеСценарии = Новый Массив;
	|%1
	|	Возврат ИсполняемыеСценарии;
	|	
	|КонецФункции
	|
	|#КонецОбласти
	|
	|#Область Тесты
	|
	|%2
	|
	|#КонецОбласти
	|
	|/////////////////////////////////////////////////////////////////////////////////
	|// Процедуры и функции, составляющие внутреннюю реализацию модуля
	|/////////////////////////////////////////////////////////////////////////////////
	|
	|#Область СлужебныеПроцедурыИФункции
	|#КонецОбласти
	|";
	
КонецФункции

Функция ШаблонМетодаТеста()
	
	Возврат
	"// @unit-test:%1
	|Процедура %3(Фреймворк, ВыполнитьВТранзакцииСОтменой = Истина) Экспорт
	|	
	|#Если Сервер Тогда
	|	Если ВыполнитьВТранзакцииСОтменой Тогда
	|		
	|		TestsWrapper.ВыполнитьТестВТранзакции(
	|			Метаданные.ОбщиеМодули.%2,
	|			""%3"",
	|			Фреймворк);
	|			
	|		Возврат;
	|		
	|	КонецЕсли;
	|#КонецЕсли
	|	
	|	ВызватьИсключение ""Тест '%2.%3' не реализован"";
	|	
	|КонецПроцедуры";
	
КонецФункции

Функция НовыйМетодыМодуляТестов(ПутьФайлаМодуляТеста, МетаИнформацияФайла, МетодыМодуляИсходников)
	
	МетодыМодуляТестов = МетодыМодуля(
			ПутьФайлаМодуляТеста,
			"^\/\/\s*?\@unit-test\:.*?\n(?:Процедура|Procedure)\s+?([а-яА-ЯёЁ0-9_\w]+?)\s*?\([^\)]*?\)\s*?(?:Экспорт|Export)");
	Если МетодыМодуляТестов.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон(ЗаголовокЛога + ": нет экспортных методов в модуле '%1'", ПутьФайлаМодуляТеста);
	КонецЕсли;
	
	НовыеМетоды = Новый Массив();
	Для каждого Метод Из МетодыМодуляИсходников Цикл
		
		ТестовыйМетод = ?(МетаИнформацияФайла.Глобальный, "Глобальный", "") + Метод;
		Если МетодыМодуляТестов.Найти(ТестовыйМетод) = Неопределено Тогда
			
			НовыеМетоды.Добавить(Метод);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыеМетоды;
	
КонецФункции

Функция ТекстыТеста(Методы, МетаИнформацияФайла)
	
	ТекстыТеста = Новый Структура();
	ТекстыТеста.Вставить("ИсполняемыеСценарии", Новый Массив());
	ТекстыТеста.Вставить("ТестовыеМетоды", Новый Массив());
	
	Для каждого Метод Из Методы Цикл
		
		ИмяМетода = ?(МетаИнформацияФайла.Глобальный, "Глобальный", "") + Метод;
		ТекстыТеста.ИсполняемыеСценарии.Добавить(СтрШаблон("	ИсполняемыеСценарии.Добавить(""%1"");", ИмяМетода));
		
		ТекстыТеста.ТестовыеМетоды.Добавить(
			СтрШаблон(ШаблонМетодаТеста(),
				МетаИнформацияФайла.ТипМетаданных,
				МетаИнформацияФайла.ИмяТестовогоМодуля,
				ИмяМетода));
		
	КонецЦикла;
	
	Возврат ТекстыТеста;
	
КонецФункции
