///////////////////////////////////////////////////////////////////////////////
// 
// Служебный модуль с реализацией сценариев обработки файлов <СортировкаДереваМетаданных>
//
///////////////////////////////////////////////////////////////////////////////

// ИмяСценария
//	Возвращает имя сценария обработки файлов
//
// Возвращаемое значение:
//   Строка   - Имя текущего сценария обработки файлов
//
Функция ИмяСценария() Экспорт
	
	Возврат "СортировкаДереваМетаданных";
	
КонецФункции // ИмяСценария()

// ПолучитьСтандартныеНастройкиСценария
//	Возвращает структуру настроек сценария
//
// Возвращаемое значение:
//   Структура   - Структура с настройками сценария
//  	* ИмяСценария	- Строка - Имя, с которым сохранятся настройки
//		* Настройка		- Соответствие - настройки
//
Функция ПолучитьСтандартныеНастройкиСценария() Экспорт
	
	НастройкиСценария = Новый Соответствие;
	// Пример возможных настроек 
	НастройкиСценария.Вставить("УчитываяПрефикс", "");
	
	Возврат  Новый Структура("ИмяСценария, Настройка", ИмяСценария(), НастройкиСценария);
	
КонецФункции

// ОбработатьФайл
//	Выполняет обработку файла
//
// Параметры:
//  АнализируемыйФайл		- Файл - Файл из журнала git для анализа
//  КаталогИсходныхФайлов  	- Строка - Каталог расположения исходных файлов относительно каталог репозитория
//  ДополнительныеПараметры - Структура - Набор дополнительных параметров, которые можно использовать 
//  	* Лог  					- Объект - Текущий лог
//  	* ИзмененныеКаталоги	- Массив - Каталоги, которые необходимо добавить в индекс
//		* КаталогРепозитория	- Строка - Адрес каталога репозитория
//		* ФайлыДляПостОбработки	- Массив - Файлы, изменившиеся / образовавшиеся в результате работы сценария
//											и которые необходимо дообработать
//
// Возвращаемое значение:
//   Булево   - Признак выполненной обработки файла
//
Функция ОбработатьФайл(АнализируемыйФайл, КаталогИсходныхФайлов, ДополнительныеПараметры) Экспорт
	
	Лог = ДополнительныеПараметры.Лог;
	НастройкиСценария = ДополнительныеПараметры.Настройки.Получить(ИмяСценария());

	УчитываяПрефиксы = "";
	Если ЗначениеЗаполнено(НастройкиСценария) 
			И ЗначениеЗаполнено(НастройкиСценария.Получить("УчитываяПрефикс")) Тогда
			
			УчитываяПрефиксы = НастройкиСценария.Получить("УчитываяПрефикс");
		
	КонецЕсли;

	Если АнализируемыйФайл.Существует() Тогда
		
		Если ТипыФайлов.ЭтоФайлОписанияКонфигурации(АнализируемыйФайл) ИЛИ 
			ТипыФайлов.ЭтоФайлОписанияКонфигурацииEDT(АнализируемыйФайл) Тогда
		
			Лог.Информация("Обработка файла '%1' по сценарию '%2'", АнализируемыйФайл.ПолноеИмя, ИмяСценария());
			ЭтоЕДТ = ТипыФайлов.ЭтоФайлОписанияКонфигурацииEDT(АнализируемыйФайл);

			Если ОтсортироватьДеревоМетаданных(АнализируемыйФайл.ПолноеИмя, УчитываяПрефиксы, ЭтоЕДТ)  Тогда
				
				ДополнительныеПараметры.ИзмененныеКаталоги.Добавить(АнализируемыйФайл.ПолноеИмя);
				
			КонецЕсли;
			
			Возврат Истина;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЛОЖЬ;
	
КонецФункции // ОбработатьФайл()

Функция ОтсортироватьДеревоМетаданных(Знач ИмяФайла, НастройкиСценария, ЭтоЕДТ)

	СодержимоеФайла = ФайловыеОперации.ПрочитатьТекстФайла(ИмяФайла);
	
	ПоискДочерних = ?(ЭтоЕДТ, "(<\/languages>\s+)^(?!.*languages)([\w\W]*)(<\/mdclass\:Configuration>)", "(<ChildObjects>\s+?)([\w\W]+?)(\s+<\/ChildObjects>)");
	Регексп = Новый РегулярноеВыражение(ПоискДочерних);
	Регексп.ИгнорироватьРегистр = Истина;
	Регексп.Многострочный = Истина;
	ПодчиненныеМетаданные = Регексп.НайтиСовпадения(СодержимоеФайла);
	
	Если ПодчиненныеМетаданные.Количество() = 0 Тогда
		
		Возврат Ложь;	
		
	КонецЕсли;
	
	ИсходнаяСтрока = ПодчиненныеМетаданные[0].Группы[2].Значение;
	ПоискМетаданных = ?(ЭтоЕДТ, "^\s*<([\w]+)>([a-zA-Z]+\.[а-яa-zA-ZА-Я0-9_]+)<\/[\w]+>", "^\s+<([\w]+)>([а-яa-zA-ZА-Я0-9_]+)<\/[\w]+>");
	РегекспМетаданные = Новый РегулярноеВыражение(ПоискМетаданных);
	РегекспМетаданные.ИгнорироватьРегистр = Истина;
	РегекспМетаданные.Многострочный = Истина;
	ОбъектыМетаданныхСтроки = РегекспМетаданные.НайтиСовпадения(ИсходнаяСтрока);
	
	ОбъектыМетаданных = Новый Соответствие;
	ОбъектыТипаПоПорядку = Новый СписокЗначений; // отдельный список с типами, нужен для того, чтобы сохранить порядок при обходе соответствия
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданныхСтроки Цикл
		
		Если ОбъектыМетаданных.Получить(ОбъектМетаданных.Группы[1].Значение) = Неопределено Тогда
			ОбъектыМетаданных.Вставить(ОбъектМетаданных.Группы[1].Значение, Новый СписокЗначений);
			ОбъектыТипаПоПорядку.Добавить(ОбъектМетаданных.Группы[1].Значение);
		КонецЕсли;

		Список = ОбъектыМетаданных.Получить(ОбъектМетаданных.Группы[1].Значение);
		
		Если Список.НайтиПоЗначению(ОбъектМетаданных.Группы[0].Значение) = Неопределено Тогда 
			Список.Добавить(ОбъектМетаданных.Группы[0].Значение, ОбъектМетаданных.Группы[2].Значение);
		КонецЕсли;
		
	КонецЦикла;

	
	СтрокаЗамены = "";
	Подсистема = ?(ЭтоЕДТ, "subsystems>", "Subsystem>");


	Для Каждого Тип Из ОбъектыТипаПоПорядку Цикл

		ОбъектМетаданных = ОбъектыМетаданных.Получить(Тип.Значение);

		Если НЕ СтрЗаканчиваетсяНа(ОбъектМетаданных[0].Значение, Подсистема) Тогда
			
			СортироватьПоПредставлениюСУчетомПрефиксов(ОбъектМетаданных, НастройкиСценария, ЭтоЕДТ);

		КонецЕсли;
		
		СтрокаЗамены = СтрокаЗамены + ?(ПустаяСтрока(СтрокаЗамены), "", Символы.ПС) 
						+ СтрСоединить(ОбъектМетаданных.ВыгрузитьЗначения(), Символы.ПС);
		
	КонецЦикла;
	
	Если СтрСравнить(ИсходнаяСтрока, СтрокаЗамены) = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЭтоЕДТ Тогда 
		
		СодержимоеФайла = Регексп.Заменить(СодержимоеФайла, "$1" + "  " + СокрЛП(СтрокаЗамены) + Символы.ПС + "$3");
	
	Иначе
	
		СодержимоеФайла = Регексп.Заменить(СодержимоеФайла, "$1" + СтрокаЗамены + "$3");
	
	КонецЕсли;

	ФайловыеОперации.ЗаписатьТекстФайла(ИмяФайла, СодержимоеФайла);
	
	Возврат Истина;
	
КонецФункции

Процедура СортироватьПоПредставлениюСУчетомПрефиксов(Список, Префикс, ЭтоЕДТ)

	ОбъектыДорабатываемойКонфигурации = Новый СписокЗначений;

	Если ЗначениеЗаполнено(Префикс) Тогда
		Удаления = Новый Массив;
		Для Каждого Объект Из Список Цикл

			Представление = ?(ЭтоЕДТ, СтрРазделить(Объект.Представление, ".")[1], Объект.Представление); 
			Если СтрНачинаетсяС(Представление, Префикс) Тогда
				ОбъектыДорабатываемойКонфигурации.Добавить(Объект.Значение, Объект.Представление);
				Удаления.Добавить(Объект);
			КонецЕсли;
		
		КонецЦикла;

		Если Удаления.Количество() > 0 Тогда
			Для каждого Элемент Из Удаления Цикл
				Список.Удалить(Элемент);
			КонецЦикла;
			
		КонецЕсли;
		
		ОбъектыДорабатываемойКонфигурации.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	КонецЕсли;

	Список.СортироватьПоПредставлению(НаправлениеСортировки.Возр);


	Для Каждого ОбъектДорабатываемойКонфигурации Из ОбъектыДорабатываемойКонфигурации Цикл 

		Список.Добавить(ОбъектДорабатываемойКонфигурации.Значение, ОбъектДорабатываемойКонфигурации.Представление);

	КонецЦикла;
	
КонецПроцедуры 
