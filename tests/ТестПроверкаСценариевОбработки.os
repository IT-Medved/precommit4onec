// BSLLS:LineLength-off
#Использовать asserts
#Использовать logos
#Использовать tempfiles
#Использовать fs
#Использовать json
#Использовать ".."

Перем юТест;
Перем Лог;
Перем МенеджерВременныхФайлов;

#Область ПрограммныйИнтерфейс

// Основная точка входа
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("СортировкаСостава_Configuration");
	ВсеТесты.Добавить("СортировкаСостава_DefinedTypes");
	ВсеТесты.Добавить("СортировкаСостава_ExchangePlans");
	ВсеТесты.Добавить("СортировкаСостава_FunctionalOptions");
	ВсеТесты.Добавить("СортировкаСостава_Subsystems");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСинхронизацияОбъектовМетаданныхВызываетИсключениеEDT");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурВызываетИсключение");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурОбработаетФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНесуществующийФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНеИсходник");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийИмеетМетодПолученияНастроек");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаВозвращаетНастройки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийВозвращаетНастройки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияНеИндексируетНеизмененные");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетТолькоНаписание");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСинхронизацияОбъектовМетаданныхВызываетИсключение");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЗагрузкуСценариевПоИмени");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьИзменениеТегаКастомизацииФормы");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийВставкиКопирайтовНеОбновляетКопирайтВФайлахПоставки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийЗапретаИспользованияПерейтиНеСрабатываетНаСтроку");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийКорректировкаXMLФормУчитываетСвязьФормРасширенийСФормамиКонфигурации");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	МенеджерПриложения.Инициализировать(ПараметрыПриложения);
	
	ВремТестер = Новый Тестер;
	Лог = Логирование.ПолучитьЛог(ВремТестер.ИмяЛога());
	
	ВключитьПоказОтладки();
	
	МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов;
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	МенеджерВременныхФайлов.Удалить();
	МенеджерВременныхФайлов = Неопределено;
	
КонецПроцедуры

#Область СортировкаСостава

Процедура СортировкаСостава_Configuration() Экспорт
	ПроверитьОбработкуФайлов("СортировкаСостава", "Configuration");
	ПроверитьОбработкуФайлов("СортировкаСостава", "Configuration\Ext");
КонецПроцедуры

Процедура СортировкаСостава_DefinedTypes() Экспорт
	ПроверитьОбработкуФайлов("СортировкаСостава", "DefinedTypes");
	ПроверитьОбработкуФайлов("СортировкаСостава", "DefinedTypes\Ext");
КонецПроцедуры

Процедура СортировкаСостава_ExchangePlans() Экспорт
	ПроверитьОбработкуФайлов("СортировкаСостава", "ExchangePlans");
	ПроверитьОбработкуФайлов("СортировкаСостава", "ExchangePlans\Ext");
КонецПроцедуры

Процедура СортировкаСостава_FunctionalOptions() Экспорт
	ПроверитьОбработкуФайлов("СортировкаСостава", "FunctionalOptions");
	ПроверитьОбработкуФайлов("СортировкаСостава", "FunctionalOptions\Ext");
КонецПроцедуры

Процедура СортировкаСостава_Subsystems() Экспорт
	ПроверитьОбработкуФайлов("СортировкаСостава", "Subsystems");
	ПроверитьОбработкуФайлов("СортировкаСостава", "Subsystems\Ext");
КонецПроцедуры

Процедура ПроверитьОбработкуФайлов(ИмяСценария, ПодкаталогИсходников)
	
	ОбъектСценария = ПолучитьСценарий(ИмяСценария);
	ДополнительныеНастройки = ПолучитьДополнительныеНастройки();

	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременныйКаталог);
	ТестовыйКаталог = ОбъединитьПути(ВременныйКаталог, ПодкаталогИсходников);
	СоздатьКаталог(ТестовыйКаталог);

	ПодкаталогФикстур     = ОбъединитьПути(КаталогТестовыхФикстур(), ИмяСценария, ПодкаталогИсходников);
	ПодкаталогФайловДо    = ОбъединитьПути(ПодкаталогФикстур, "До");
	ПодкаталогФайловПосле = ОбъединитьПути(ПодкаталогФикстур, "После");
	ПодкаталогНастроек    = ОбъединитьПути(ПодкаталогФикстур, "НастройкиСценария");
	
	Для каждого ТестовыйФайл Из НайтиФайлы(ПодкаталогФайловДо, ПолучитьМаскуВсеФайлы()) Цикл

		ИмяФайла = ТестовыйФайл.Имя;

		ФайлПослеЭталон = Новый Файл(ОбъединитьПути(ПодкаталогФайловПосле, ИмяФайла));
		ФайлДолженИзмениться = ФайлПослеЭталон.Существует();
		Если Не ФайлДолженИзмениться Тогда
			ФайлПослеЭталон = ТестовыйФайл;
		КонецЕсли;
		
		ОбрабатываемыйФайл = Новый Файл(ОбъединитьПути(ТестовыйКаталог, ИмяФайла));
		КопироватьФайл(ТестовыйФайл.ПолноеИмя, ОбрабатываемыйФайл.ПолноеИмя);

		НастройкиСценария = Новый Соответствие;
		ФайлНастроек = Новый Файл(ОбъединитьПути(ПодкаталогНастроек, ТестовыйФайл.ИмяБезРасширения + ".json"));
		Если ФайлНастроек.Существует() Тогда
			ТекстНастроек = ФайловыеОперации.ПрочитатьТекстФайла(ФайлНастроек.ПолноеИмя);
			НастройкиСценария = Новый ПарсерJSON.ПрочитатьJSON(ТекстНастроек);
		КонецЕсли;
		ДополнительныеНастройки.Настройки.Вставить(ИмяСценария, НастройкиСценария);

		Результат        = ОбъектСценария.ОбработатьФайл(ОбрабатываемыйФайл, "", ДополнительныеНастройки);
		ТекстПосле       = ФайловыеОперации.ПрочитатьТекстФайла(ОбрабатываемыйФайл.ПолноеИмя);
		ТекстПослеЭталон = ФайловыеОперации.ПрочитатьТекстФайла(ФайлПослеЭталон.ПолноеИмя);
		
		Ожидаем.Что(ТекстПосле, "Проверка содержимого файла " + ИмяФайла).Равно(ТекстПослеЭталон);
		Ожидаем.Что(Результат, "Проверка результата обработки файла " + ИмяФайла).Равно(ФайлДолженИзмениться);
		
	КонецЦикла;

	МенеджерВременныхФайлов.УдалитьФайл(ВременныйКаталог);

КонецПроцедуры

#КонецОбласти

#Область ИсправлениеНеКаноническогоНаписания

Процедура ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетФайл() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ИсправлениеНеКаноническогоНаписания.os");
	ИмяФайла = "ИсправлениеНеКаноническогоНаписания.bsl";
	
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла);
	
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	Ожидаем.Что(Результат, Истина).ЭтоИстина();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетТолькоНаписание() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ИсправлениеНеКаноническогоНаписания.os");
	ИмяФайла = "ИсправлениеНеКаноническогоНаписания.bsl";
	
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла);
	ТекстФайлаДо = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	ТекстФайлаПосле = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	
	// текст изменен
	Ожидаем.Что(ТекстФайлаДо, Истина).Не_().Равно(ТекстФайлаПосле);
	// текст тождественен
	Ожидаем.Что(ВРег(ТекстФайлаДо), Истина).Равно(ВРег(ТекстФайлаПосле));
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияНеИндексируетНеизмененные() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ИсправлениеНеКаноническогоНаписания.os");
	ИмяФайла = "ИсправлениеНеКаноническогоНаписания.bsl";
	
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла);
	
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	ДопНастройки = ПолучитьДополнительныеНастройки();
	
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ДопНастройки);
	Ожидаем.Что(ДопНастройки.ИзмененныеКаталоги.Количество(), Истина).Равно(0);
	
КонецПроцедуры

#КонецОбласти

#Область ОтключениеПолнотекстовогоПоиска

Процедура ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаИмеетМетодПолученияНастроек() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ОтключениеПолнотекстовогоПоиска.os");
	
	СценарийИмеетМетод(ОбъектСценария, НазваниеМетодаНастроек());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаВозвращаетНастройки() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ОтключениеПолнотекстовогоПоиска.os");
	
	СценарийВозвращаетНастройки(ОбъектСценария, "ОтключениеПолнотекстовогоПоиска");
	
КонецПроцедуры

#КонецОбласти

#Область РазборОтчетовОбработокРасширений

Процедура ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийИмеетМетодПолученияНастроек() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("РазборОтчетовОбработокРасширений.os");
	
	СценарийИмеетМетод(ОбъектСценария, НазваниеМетодаНастроек());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийВозвращаетНастройки() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("РазборОтчетовОбработокРасширений.os");
	
	СценарийВозвращаетНастройки(ОбъектСценария, "РазборОтчетовОбработокРасширений");
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДублейПроцедурИФункций

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурВызываетИсключение() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Файл = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурНегативныйТест.bsl"));
	СПараметрами = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурСПараметрами.bsl"));
	
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "обнаружены неуникальные имена методов");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, СПараметрами, "обнаружены неуникальные имена методов");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурОбработаетФайл() Экспорт
	
	Файл = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурПоложительныйТест.bsl"));
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоИстина();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНесуществующийФайл() Экспорт
	
	Файл = Новый Файл(ПолучитьИмяВременногоФайла("bsl"));
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоЛожь();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНеИсходник() Экспорт
	
	Файл = Новый Файл(МенеджерВременныхФайлов.СоздатьФайл("xml"));
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоЛожь();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗагрузкуСценариевПоИмени() Экспорт
	
	Файл = Новый Файл(МенеджерВременныхФайлов.СоздатьФайл("bsl"));
	
	Имена = Новый Массив;
	
	Имена.Добавить("ПроверкаДублейПроцедурИФункций");
	
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "Сценарий не получен").Равно(1);
	
	Имена.Добавить("ПроверкаДублейПроцедурИФункций");
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "Добавлен один и тот же сценарий").Равно(1);
	
	Имена.Добавить("ПроверкаДублейПроцедурИФункций.os");
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "Добавлен один и тот же сценарий").Равно(1);
	
	Имена.Добавить("РазборОтчетовОбработокРасширений.os");
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "С массивом загружаемых сценариев что-то пошло не так").Равно(2);
	
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияОбъектовМетаданныхИФайлов

Процедура ТестДолжен_ПроверитьЧтоСинхронизацияОбъектовМетаданныхВызываетИсключение() Экспорт

	МетаданныеКонфигурации.СброситьКеш(); // Если не сбрасывать будет ошибка при кешировани каталогов для EDT и Конфигуратора
	
	ОбъектСценария = ПолучитьСценарий("СинхронизацияОбъектовМетаданныхИФайлов.os");
	Файл = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "СинхронизацияОбъектовМетаданныхИФайлов/Configuration.xml"));
	
	// Переименование типа без переименования каталога
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Имя каталога Ancillary отличается от метаданного ancillary");
	// удаление типа без удаления файлов
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Необходимо удалить файлы");
	// базовые элементы
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог ChartsOfCharacteristicTypes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Catalogs");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommandGroups");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonAttributes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonCommands");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonForms");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonModules");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonPictures");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonTemplates");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Constants");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог DataProcessors");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог DefinedTypes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Documents");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Enums");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог EventSubscriptions");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог FunctionalOptions");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог InformationRegisters");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Languages");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Reports");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Roles");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог ScheduledJobs");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог SessionParameters");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Subsystems");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог XDTOPackages");
	// элементы метаданных
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Language.Русский");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Subsystem.ПодсистемыБСП");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonPicture.GUID");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Role.АвтоТестированиеАдминистратор");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для SessionParameter.автоТестирование");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonTemplate.HiddenStart");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonModule.sFTPКлиентСервер");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonAttribute.UID");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для XDTOPackage.bsp_ancillary");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для EventSubscription.ВерсионированиеПриЗаписи");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для ScheduledJob.РоботАвтоматическаяОбработкаИзмененийАдресногоКлассификатора");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для FunctionalOption.ВестиЖурналДействийПользователя");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для DefinedType.ТипUIDСтрока");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonCommand.АудиторскийСлед");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommandGroup.Печать");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Constant.АдресатыПолученияУведомленийОбИзмененияхВАлгоритмах");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonForm.АвторизацияПользователя");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Catalog.АдресаЭлектроннойПочты");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Document.АттестацияРазработчика");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Enum.ВариантХраненияФайлов");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Report.анализЖурналаРегистрации");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для DataProcessor.активныеПользователи");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для InformationRegister.администраторыБаз");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для ChartOfCharacteristicTypes.РасширенныеХарактеристикиОбъектов");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСинхронизацияОбъектовМетаданныхВызываетИсключениеEDT() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("СинхронизацияОбъектовМетаданныхИФайлов.os");
	Файл = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "СинхронизацияОбъектовМетаданныхИФайловEDT/Configuration/Configuration.mdo"));
	
	// Переименование типа без переименования каталога
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Имя каталога Ancillary отличается от метаданного ancillary");
	// удаление типа без удаления файлов
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Необходимо удалить файлы");
	// базовые элементы
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог ChartsOfCharacteristicTypes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Catalogs");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommandGroups");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonAttributes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonCommands");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonForms");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonModules");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonPictures");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonTemplates");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Constants");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог DataProcessors");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог DefinedTypes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Documents");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Enums");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог EventSubscriptions");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог FunctionalOptions");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог InformationRegisters");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Reports");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Roles");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог ScheduledJobs");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог SessionParameters");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Subsystems");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог XDTOPackages");
	// элементы метаданных
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Subsystem.ПодсистемыБСП");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonPicture.GUID");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Role.Администратор");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для SessionParameter.ГруппыДоступаПользователя");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonTemplate.SftpExtension");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonModule.SFTPКлиентСервер");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonAttribute.UID");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для XDTOPackage.bsp_ancillary");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для EventSubscription.ВерсионированиеПриЗаписи");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для ScheduledJob.РоботАвтоматическаяОбработкаИзмененийАдресногоКлассификатора");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для FunctionalOption.ВестиЖурналДействийПользователя");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для DefinedType.ТипUIDСтрока");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonCommand.АудиторскийСлед");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommandGroup.Печать");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Catalog.АдресаЭлектроннойПочты");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Enum.ВариантХраненияФайлов");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Report.АнализЖурналаРегистрации");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для DataProcessor.АктивныеПользователи");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для ChartOfCharacteristicTypes.ТипыЗначенийВидовПравДоступа");
КонецПроцедуры

#КонецОбласти

#Область ОтключениеРазрешенияИзменятьФорму

Процедура ТестДолжен_ПроверитьИзменениеТегаКастомизацииФормы() Экспорт
	
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("123", "test.os");
	
	ОбъектСценария = ПолучитьСценарий("ОтключениеРазрешенияИзменятьФорму.os");
	
	Настройки = ПолучитьДополнительныеНастройки();
	Настройки.ТипИзменения = ВариантИзмененийФайловGit.Добавлен;

	// сценарий не берет файлы с расширением .os
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, Ложь).ЭтоЛожь();
	
	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("123", "Form.form", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы edt формата").ЭтоИстина();
	
	
	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("123", "Form.xml", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата конфигуратора").ЭтоИстина();
	
	// файл не изменен 
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<allowFormCustomize>false</allowFormCustomize>", "Form.form", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Файл изменился, а не должен был").Равно("<allowFormCustomize>false</allowFormCustomize>");

	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<allowFormCustomize>true</allowFormCustomize>", "Form.form", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата edt").ЭтоИстина();
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Замена в теге edt не удалась").Содержит("false");
	Ожидаем.Что(ТекстФайла, "Замена в теге edt не удалась").Содержит("<allowFormCustomize>false</allowFormCustomize>");
	

	
	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<WindowOpeningMode>LockOwnerWindow</WindowOpeningMode>", "Form.xml", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата конфигуратора").ЭтоИстина();
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("false");
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("<Customizable>false</Customizable>");
	
	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<WindowOpeningMode>LockOwnerWindow</WindowOpeningMode>
	|<Customizable>true</Customizable>", "Form.xml", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата конфигуратора").ЭтоИстина();
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("false");
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("<Customizable>false</Customizable>");

	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<WindowOpeningMode>LockOwnerWindow</WindowOpeningMode>
	|<Customizable>false</Customizable>", "Form.xml", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата конфигуратора").ЭтоИстина();
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("false");
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("<Customizable>false</Customizable>");



	// файл обработан. При этом  сценарий реагирует только на `добавленные` файлы, но был вызван явно через передачу параметра
	Настройки = ПолучитьДополнительныеНастройки();
	Настройки.ЗатребованныеСценарии = Новый Массив;
	Настройки.ЗатребованныеСценарии.Добавить(ОбъектСценария.ИмяСценария());
	Настройки.ТипИзменения = ВариантИзмененийФайловGit.Изменен;
	
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<allowFormCustomize>true</allowFormCustomize>", "Form.form", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата edt").ЭтоИстина();
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Замена в теге edt не удалась").Содержит("false");
	Ожидаем.Что(ТекстФайла, "Замена в теге edt не удалась").Содержит("<allowFormCustomize>false</allowFormCustomize>");
	
		
	
КонецПроцедуры

#КонецОбласти

#Область ВставкаКопирайтов

Процедура ТестДолжен_ПроверитьЧтоСценарийВставкиКопирайтовНеОбновляетКопирайтВФайлахПоставки() Экспорт
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();

	ОбъектСценария = ПолучитьСценарий("ВставкаКопирайтов.os");

	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	Фикстура = Фикстура("ВставкаКопирайтов");
	СоздатьКаталог(ВременныйКаталог);
	СкопироватьКаталог(Фикстура, ВременныйКаталог);

	Настройки = ПолучитьДополнительныеНастройки(ВременныйКаталог);
	
	МассивФайлов = ИзмененныеФайлыМодулейКонфигуратора();
	Для Каждого ПроверяемыйФайл Из МассивФайлов Цикл
		Файл = Новый Файл(ОбъединитьПути(ВременныйКаталог, "configurator", ПроверяемыйФайл.Имяфайла));
		Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
		Ожидаем.Что(Результат, "Ошибка вставки копирайта в файл " + ПроверяемыйФайл.Имяфайла).Равно(ПроверяемыйФайл.ОжидаемыйРезультат);
	КонецЦикла;

	МассивФайлов = ИзмененныеФайлыМодулейEDT();
	Для Каждого ПроверяемыйФайл Из МассивФайлов Цикл
		Файл = Новый Файл(ОбъединитьПути(ВременныйКаталог, "EDT/Configuration/src", ПроверяемыйФайл.Имяфайла));
		Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
		Ожидаем.Что(Результат, "Ошибка вставки копирайта в файл " + ПроверяемыйФайл.Имяфайла).Равно(ПроверяемыйФайл.ОжидаемыйРезультат);
	КонецЦикла;

	МассивФайлов = ИзмененныеФайлыБезПоставки();
	Для Каждого ПроверяемыйФайл Из МассивФайлов Цикл
		Файл = Новый Файл(ОбъединитьПути(ВременныйКаталог, "no_parent_configuration", ПроверяемыйФайл.Имяфайла));
		Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
		Ожидаем.Что(Результат, "Ошибка вставки копирайта в файл " + ПроверяемыйФайл.Имяфайла).Равно(ПроверяемыйФайл.ОжидаемыйРезультат);
	КонецЦикла;

	МенеджерВременныхФайлов.УдалитьФайл(ВременныйКаталог);

	ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	Настройки.Лог.Отладка("Тестирование заполнения копирайта выполнено за %1 мс.", ВремяВыполнения);
КонецПроцедуры

#КонецОбласти

#Область ЗапретИспользованияПерейти

Процедура ТестДолжен_ПроверитьЧтоСценарийЗапретаИспользованияПерейтиНеСрабатываетНаСтроку() Экспорт
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();

	ОбъектСценария = ПолучитьСценарий("ЗапретИспользованияПерейти.os");

	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	Фикстура = Фикстура("ЗапретИспользованияПерейти");
	СоздатьКаталог(ВременныйКаталог);
	СкопироватьКаталог(Фикстура, ВременныйКаталог);

	Настройки = ПолучитьДополнительныеНастройки(ВременныйКаталог);
	МассивФайлов = НайтиФайлы(ВременныйКаталог, "*.bsl", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		ОжидаемыйРезультат = СтрНайти(Файл.Имя, "Перейти") = 0;
		Попытка
			Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
		Исключение
			Результат = Ложь;
		КонецПопытки;
		Ожидаем.Что(Результат, "Ошибка проверки запрета использования Перейти в файле " + Файл.Имя).Равно(ОжидаемыйРезультат);
	КонецЦикла;

	МенеджерВременныхФайлов.УдалитьФайл(ВременныйКаталог);

	ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	Настройки.Лог.Отладка("Тестирование запрета использования Перейти выполнено за %1 мс.", ВремяВыполнения);
КонецПроцедуры

#КонецОбласти

#Область КорректировкаXMLФорм

Процедура ТестДолжен_ПроверитьЧтоСценарийКорректировкаXMLФормУчитываетСвязьФормРасширенийСФормамиКонфигурации() Экспорт
	ОбъектСценария = ПолучитьСценарий("КорректировкаXMLФорм.os");

	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	Фикстура = Фикстура("КорректировкаXMLФорм");
	СоздатьКаталог(ВременныйКаталог);
	СкопироватьКаталог(Фикстура, ВременныйКаталог);

	Настройки = ПолучитьДополнительныеНастройки(ВременныйКаталог);
	ПутьККаталогуДо = ОбъединитьПути(ВременныйКаталог, "До");
	ПутьККаталогуПосле = ОбъединитьПути(ВременныйКаталог, "После");
	
	ФорматыФайла = Новый Структура;
	ФорматыФайла.Вставить("Configurator", "Form.xml");
	ФорматыФайла.Вставить("EDT", "Form.form");

	// Тестовые файлы имеют следующие особенности:
	// 1. Форма без родителя, нет изменений, нет дублей
	// 2. Форма с родителем, нет изменений, нет дублей
	// 3. Форма без родителя, есть дубли, есть пропущенные идентификаторы
	// 4. Форма с родителем, идентификаторы заимствованных реквизитов расходятся
	// 5. Форма с родителем, идентификаторы заимствованных реквизитов расходятся, есть пропущенные идентификаторы, есть дубли.
	Для Каждого Формат Из ФорматыФайла Цикл
		Для Подкаталог = 1 По 5 Цикл
			Файл = Новый Файл(ОбъединитьПути(ПутьККаталогуДо, Формат.Ключ, Подкаталог, Формат.Значение));
			Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
			Ожидаем.Что(Результат, "Файл формы не был обработан").Равно(Истина);
		
			СодержимоеФайла = СокрЛП(ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя));
			СодержимоеЭталон = СокрЛП(ФайловыеОперации.ПрочитатьТекстФайла(ОбъединитьПути(ПутьККаталогуПосле, Формат.Ключ, Подкаталог, Формат.Значение)));
			Ожидаем.Что(СодержимоеФайла, "Файл формы был обработан некорректно").Равно(СодержимоеЭталон);
		КонецЦикла;
	КонецЦикла;

	МенеджерВременныхФайлов.УдалитьФайл(ВременныйКаталог);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Служебные

Процедура ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, ТекстИсключения)
	
	ДополнительныеНастройки = ПолучитьДополнительныеНастройки();
	ПараметрыМетода = Новый Массив;
	
	ПараметрыМетода.Добавить(Файл);
	ПараметрыМетода.Добавить(Файл.Путь);
	ПараметрыМетода.Добавить(ДополнительныеНастройки);
	
	Ожидаем.Что(ОбъектСценария).Метод("ОбработатьФайл", ПараметрыМетода).ВыбрасываетИсключение(ТекстИсключения);
	
КонецПроцедуры

Процедура СценарийИмеетМетод(ОбъектСценария, ИмяМетода)
	
	Рефлектор = Новый Рефлектор;
	ЕстьМетод = Рефлектор.МетодСуществует(ОбъектСценария, ИмяМетода);
	
	Ожидаем.Что(ЕстьМетод, Истина).ЭтоИстина();
	
КонецПроцедуры

Функция ПолучитьСценарий(ИмяСценария)
	
	Сценарий = ОбъединитьПути(КаталогИсходников(), "src", "СценарииОбработки", ИмяСценария);
	РасширениеФайла = ".os";
	Если Не СтрЗаканчиваетсяНа(Сценарий, РасширениеФайла) Тогда
		Сценарий = Сценарий + РасширениеФайла;
	КонецЕсли;
	ОбъектСценария = ЗагрузитьСценарий(Сценарий);
	
	Возврат ОбъектСценария;
	
КонецФункции

Процедура СценарийВозвращаетНастройки(ОбъектСценария, ИмяНастройки)
	
	Рефлектор = Новый Рефлектор;
	СтруктураНастроек = Рефлектор.ВызватьМетод(ОбъектСценария, НазваниеМетодаНастроек());
	
	Утверждения.ПроверитьРавенство(СтруктураНастроек.ИмяСценария, ИмяНастройки);
	Утверждения.ПроверитьРавенство(ТипЗнч(СтруктураНастроек.Настройка), Тип("Соответствие"));
	
КонецПроцедуры

Процедура ВключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ВыключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Информация);
КонецПроцедуры

Функция КаталогТестовыхФикстур()
	Возврат Норма(ОбъединитьПути(КаталогИсходников(), "tests/fixtures"));
КонецФункции

Функция Фикстура(ПутьВКаталогеФикстур)
	Возврат ОбъединитьПути(КаталогТестовыхФикстур(), ПутьВКаталогеФикстур);
КонецФункции

Функция КаталогИсходников()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции

Функция НазваниеМетодаНастроек()
	
	Возврат "ПолучитьСтандартныеНастройкиСценария";
	
КонецФункции

Функция ПолучитьДополнительныеНастройки(Знач КаталогРепозитория = Неопределено, Знач ТекущийКаталогИсходныхФайлов = Неопределено)
	
	Если КаталогРепозитория = Неопределено Тогда
		КаталогРепозитория = ТекущийКаталог();
	КонецЕсли;
	
	УправлениеНастройками = МенеджерНастроек.НастройкиРепозитория(КаталогРепозитория, Ложь);
	Настройка = МенеджерНастроек.НастройкиПроекта().Получить("НастройкиСценариев");

	ДополнительныеНастройки = СценарииОбработки.ПолучитьСтандартныеПараметрыОбработки();
	ДополнительныеНастройки.Лог = Лог;
	ДополнительныеНастройки.КаталогРепозитория = КаталогРепозитория;
	ДополнительныеНастройки.ТекущийКаталогИсходныхФайлов = ТекущийКаталогИсходныхФайлов;
	ДополнительныеНастройки.Настройки = Настройка;
	
	Возврат ДополнительныеНастройки;
	
КонецФункции

Функция ПодготовитьИзменяемыйТестовыйФайл(Знач ИмяТестовогоФайла, ЗаписатьКакИмя = "", ВДиректории = "")
	ИмяКопируемогоФайла = ОбъединитьПути(КаталогТестовыхФикстур(), ИмяТестовогоФайла);
	
	ВременныйКаталог = МенеджерВременныхФайлов.СоздатьКаталог();
	Если ВДиректории <> "" Тогда
		ВременныйКаталог = ОбъединитьПути(ВременныйКаталог, Норма(ВДиректории));
		СоздатьКаталог(ВременныйКаталог);
	КонецЕсли;
	МенеджерВременныхФайлов.БазовыйКаталог = ВременныйКаталог;

	ИмяВременногоФайла = ОбъединитьПути(ВременныйКаталог, ?(ПустаяСтрока(ЗаписатьКакИмя), ИмяТестовогоФайла, ЗаписатьКакИмя));
	
	КопироватьФайл(ИмяКопируемогоФайла, ИмяВременногоФайла);
	Файл = Новый Файл(ИмяВременногоФайла);

	Возврат Файл;
КонецФункции

Функция ПодготовитьИзменяемыйТестовыйФайлИзТекста(Знач Текст, Знач Имя, СтрогоеСоответствие = Ложь)
	
	Если СтрогоеСоответствие Тогда
		ПутьКФайлу = МенеджерВременныхФайлов.СоздатьКаталог();
		ПутьКФайлу = ОбъединитьПути(ПутьКФайлу, Имя);
	Иначе
		ПутьКФайлу = МенеджерВременныхФайлов.СоздатьФайл(Имя);
	КонецЕсли;
	
	
	Файл = Новый Файл(ПутьКФайлу);
	ФайловыеОперации.ЗаписатьТекстФайла(ПутьКФайлу, Текст);
	
	Возврат Файл;
	
КонецФункции

Функция Норма(Путь)
	#Если Windows Тогда
		Возврат СтрЗаменить(Путь, "/", "\");
	#Иначе
		Возврат СтрЗаменить(Путь, "\", "/");
	#КонецЕсли
КонецФункции

Процедура ИспользоватьТестовуюНастройку(КаталогРепозитория, ИмяФайлаНастройки)
	
	КопироватьФайл(
		ОбъединитьПути(КаталогТестовыхФикстур(), "Настройки", ИмяФайлаНастройки),
		ОбъединитьПути(КаталогРепозитория, "v8config.json"));
	
КонецПроцедуры

Функция КейсыПроверкиДобавленияМодулейТестов()
	
	Кейсы = Новый ТаблицаЗначений();
	Кейсы.Колонки.Добавить("КаталогТипаМетаданных");
	Кейсы.Колонки.Добавить("ИмяМетаданных");
	Кейсы.Колонки.Добавить("ИмяМодуляМетаданных");
	Кейсы.Колонки.Добавить("ИмяМетодаМодуля");
	Кейсы.Колонки.Добавить("ИмяТестовогоМодуля");
	Кейсы.Колонки.Добавить("Клиент");
	Кейсы.Колонки.Добавить("Сервер");
	Кейсы.Колонки.Добавить("Глобальный");
	
	ДобавитьКейсПроверкиТестов(Кейсы, "AccountingRegisters", "РегистрБухгалтерии1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РБ_РегистрБухгалтерии1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "AccountingRegisters", "РегистрБухгалтерии1", "RecordSetModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РБ_РегистрБухгалтерии1_МНЗ", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "AccumulationRegisters", "РегистрНакопления1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РН_РегистрНакопления1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "AccumulationRegisters", "РегистрНакопления1", "RecordSetModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РН_РегистрНакопления1_МНЗ", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "BusinessProcesses", "БизнесПроцесс1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "БП_БизнесПроцесс1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "BusinessProcesses", "БизнесПроцесс1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "БП_БизнесПроцесс1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "CalculationRegisters", "РегистрРасчета1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РР_РегистрРасчета1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CalculationRegisters", "РегистрРасчета1", "RecordSetModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РР_РегистрРасчета1_МНЗ", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "Catalogs", "Справочник1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Спр_Справочник1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "Catalogs", "Справочник1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Спр_Справочник1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfAccounts", "ПланСчетов1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПС_ПланСчетов1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfAccounts", "ПланСчетов1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПС_ПланСчетов1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfCalculationTypes", "ПланВидовРасчета1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПВР_ПланВидовРасчета1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfCalculationTypes", "ПланВидовРасчета1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПВР_ПланВидовРасчета1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfCharacteristicTypes", "ПланВидовХарактеристик1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПВХ_ПланВидовХарактеристик1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfCharacteristicTypes", "ПланВидовХарактеристик1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПВХ_ПланВидовХарактеристик1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентЧастичноПокрытый", "Module.bsl", "ПокрытаяПроцедураЭкспортнаяБезПараметров", "ОМ_ОбщийМодульКлиентЧастичноПокрытый", Истина, Ложь); // Уже есть.
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентЧастичноПокрытый", "Module.bsl", "НепокрытаяФункцияЭкспортнаяБезПараметров", "ОМ_ОбщийМодульКлиентЧастичноПокрытый", Истина, Ложь);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульСерверГлобальныйЧастичноПокрытый", "Module.bsl", "глНепокрытаяПроцедураЭкспортнаяБезПараметров", "ОМ_ОбщийМодульСерверГлобальныйЧастичноПокрытый", Ложь, Истина, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульСерверГлобальныйЧастичноПокрытый", "Module.bsl", "глПокрытаяФункцияЭкспортнаяБезПараметров", "ОМ_ОбщийМодульСерверГлобальныйЧастичноПокрытый", Ложь, Истина, Истина); // Уже есть.
	
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентСерверГлобальный", "Module.bsl", "глПроцедураЭкспортнаяБезПараметров", "ОМ_ОбщийМодульКлиентСерверГлобальный", Истина, Истина, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентСерверГлобальный", "Module.bsl", "глПроцедураЭкспортнаяСПараметрами", "ОМ_ОбщийМодульКлиентСерверГлобальный", Истина, Истина, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентСерверГлобальный", "Module.bsl", "глФункцияЭкспортнаяБезПараметров", "ОМ_ОбщийМодульКлиентСерверГлобальный", Истина, Истина, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентСерверГлобальный", "Module.bsl", "глФункцияЭкспортнаяСПараметрами", "ОМ_ОбщийМодульКлиентСерверГлобальный", Истина, Истина, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульСервер", "Module.bsl", "ПроцедураЭкспортнаяБезПараметров", "ОМ_ОбщийМодульСервер", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "DataProcessors", "Обработка1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Обр_Обработка1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "DataProcessors", "Обработка1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Обр_Обработка1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "Documents", "Документ1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Док_Документ1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "Documents", "Документ1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Док_Документ1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "Enums", "Перечисление1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Пер_Перечисление1_ММ", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "ExchangePlans", "ПланОбмена1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПО_ПланОбмена1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "ExchangePlans", "ПланОбмена1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПО_ПланОбмена1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "InformationRegisters", "РегистрСведений1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РС_РегистрСведений1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "InformationRegisters", "РегистрСведений1", "RecordSetModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РС_РегистрСведений1_МНЗ", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "Reports", "Отчет1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Отч_Отчет1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "Reports", "Отчет1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Отч_Отчет1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "Tasks", "Задача1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Зад_Задача1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "Tasks", "Задача1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Зад_Задача1_МО", Ложь, Истина);
	
	Возврат Кейсы;
	
КонецФункции

Процедура ДобавитьКейсПроверкиТестов(Кейсы, КаталогТипаМетаданных, ИмяМетаданных, ИмяМодуляМетаданных, ИмяМетодаМодуля, ИмяТестовогоМодуля, Клиент, Сервер, Глобальный = Ложь)
	
	Кейс = Кейсы.Добавить();
	Кейс.КаталогТипаМетаданных = КаталогТипаМетаданных;
	Кейс.ИмяМетаданных = ИмяМетаданных;
	Кейс.ИмяМодуляМетаданных = ИмяМодуляМетаданных;
	Кейс.ИмяМетодаМодуля = ИмяМетодаМодуля;
	Кейс.ИмяТестовогоМодуля = ИмяТестовогоМодуля;
	Кейс.Клиент = Клиент;
	Кейс.Сервер = Сервер;
	Кейс.Глобальный = Глобальный;
	
КонецПроцедуры

Процедура СкопироватьКаталог(Источник, Приемник)
	Файлы = НайтиФайлы(Источник, "*");
	Для Каждого Файл Из Файлы Цикл
		НовыйОбъект = ОбъединитьПути(Приемник, Файл.Имя);
			
		Если Файл.ЭтоКаталог() Тогда
			СоздатьКаталог(НовыйОбъект);
			СкопироватьКаталог(Файл.ПолноеИмя, НовыйОбъект);
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, НовыйОбъект);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ИзмененныеФайлыМодулейКонфигуратора()
	МассивФайлов = Новый Массив;

	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "AccumulationRegisters/ПартииТоваров/Ext/RecordSetModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Commands/ОткрытьФормуСписка/Ext/CommandModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Ext/ManagerModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Ext/ObjectModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Forms/ФормаСписка/Ext/Form/Module.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Forms/ФормаЭлемента/Ext/Form/Module.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "CommonCommands/ОткрытьФормуПросмотраСообщения/Ext/CommandModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "CommonForms/ПросмотрСообщения/Ext/Form/Module.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "CommonModules/УведомленияКлиентСервер/Ext/Module.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Constants/НастройкиПрограммы/Ext/ValueManagerModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/ПриходнаяНакладная/Commands/ОткрытьФормуСписка/Ext/CommandModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/ПриходнаяНакладная/Ext/ObjectModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/ПриходнаяНакладная/Forms/ФормаДокумента/Ext/Form/Module.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/РасходнаяНакладная/Ext/ObjectModule.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/РасходнаяНакладная/Forms/ФормаДокумента/Ext/Form/Module.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "HTTPServices/CommonTasks/Ext/Module.bsl", Ложь);

	Возврат МассивФайлов;
КонецФункции

Функция ИзмененныеФайлыМодулейEDT()
	МассивФайлов = Новый Массив;

	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "AccumulationRegisters/ПартииТоваров/RecordSetModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/ManagerModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/ObjectModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Commands/ОткрытьФормуСписка/CommandModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Forms/ФормаСписка/Module.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Forms/ФормаЭлемента/Module.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "CommonCommands/ОткрытьФормуПросмотраСообщения/CommandModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "CommonForms/ПросмотрСообщения/Module.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "CommonModules/УведомленияКлиентСервер/Module.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Constants/НастройкиПрограммы/ValueManagerModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/ПриходнаяНакладная/ObjectModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/ПриходнаяНакладная/Commands/ОткрытьФормуСписка/CommandModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/ПриходнаяНакладная/Forms/ФормаДокумента/Module.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/РасходнаяНакладная/ObjectModule.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/РасходнаяНакладная/Forms/ФормаДокумента/Module.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "HTTPServices/CommonTasks/Module.bsl", Ложь);

	Возврат МассивФайлов;
КонецФункции

Функция ИзмененныеФайлыБезПоставки()
	МассивФайлов = Новый Массив;

	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "AccumulationRegisters/ПартииТоваров/Ext/RecordSetModule.bsl", Ложь);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Commands/ОткрытьФормуСписка/Ext/CommandModule.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Ext/ManagerModule.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Ext/ObjectModule.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Forms/ФормаСписка/Ext/Form/Module.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Catalogs/Номенклатура/Forms/ФормаЭлемента/Ext/Form/Module.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "CommonCommands/ОткрытьФормуПросмотраСообщения/Ext/CommandModule.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "CommonForms/ПросмотрСообщения/Ext/Form/Module.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "CommonModules/УведомленияКлиентСервер/Ext/Module.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Constants/НастройкиПрограммы/Ext/ValueManagerModule.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/ПриходнаяНакладная/Commands/ОткрытьФормуСписка/Ext/CommandModule.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/ПриходнаяНакладная/Ext/ObjectModule.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/ПриходнаяНакладная/Forms/ФормаДокумента/Ext/Form/Module.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/РасходнаяНакладная/Ext/ObjectModule.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "Documents/РасходнаяНакладная/Forms/ФормаДокумента/Ext/Form/Module.bsl", Истина);
	ДобавитьПроверяемыйФайлВКоллекцию(МассивФайлов, "HTTPServices/CommonTasks/Ext/Module.bsl", Истина);

	Возврат МассивФайлов;
КонецФункции

Процедура ДобавитьПроверяемыйФайлВКоллекцию(Коллекция, ИмяФайла, ОжидаемыйРезультат)
	Структура = Новый Структура("ИмяФайла, ОжидаемыйРезультат", ИмяФайла, ОжидаемыйРезультат);
	Коллекция.Добавить(Структура);
КонецПроцедуры

#КонецОбласти
