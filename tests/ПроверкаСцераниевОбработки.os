#Использовать asserts
#Использовать logos
#Использовать tempfiles
#Использовать semver

Перем юТест;
Перем Лог;
Перем МенеджерВременныхФайлов;

#Область ПрограммныйИнтерфейс
// Основная точка входа
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурВызываетИсключение");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурОбработаетФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНесуществующийФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНеИсходник");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаИмеетМетодПолученияНастроек");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийИмеетМетодПолученияНастроек");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаВозвращаетНастройки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийВозвращаетНастройки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияНеИндексируетНеизмененные");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетТолькоНаписание");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСинхронизацияОбъектовМетаданныхВызываетИсключение");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЗагрузкуСценариевПоИмени");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьБагДвижкаOscript");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	ВремТестер = Новый Тестер;
	Лог = Логирование.ПолучитьЛог(ВремТестер.ИмяЛога());
	
	ВключитьПоказОтладки();
	
	МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов;
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	МенеджерВременныхФайлов.Удалить();
	МенеджерВременныхФайлов = Неопределено;
	
КонецПроцедуры

#Область ИсправлениеНеКаноническогоНаписания

Процедура ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетФайл() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ИсправлениеНеКаноническогоНаписания.os");
	ИмяФайла = "ИсправлениеНеКаноническогоНаписания.bsl";
	
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла);
	
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	Ожидаем.Что(Результат, Истина).ЭтоИстина();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетТолькоНаписание() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ИсправлениеНеКаноническогоНаписания.os");
	ИмяФайла = "ИсправлениеНеКаноническогоНаписания.bsl";
	
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла);
	ТекстФайлаДо = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	ТекстФайлаПосле = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	
	// текст изменен
	Ожидаем.Что(ТекстФайлаДо, Истина).Не_().Равно(ТекстФайлаПосле);
	// текст тождественен
	Ожидаем.Что(Врег(ТекстФайлаДо), Истина).Равно(Врег(ТекстФайлаПосле));
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияНеИндексируетНеизмененные() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ИсправлениеНеКаноническогоНаписания.os");
	ИмяФайла = "ИсправлениеНеКаноническогоНаписания.bsl";
	
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла);
	
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	ДопНастройки = ПолучитьДополнительныеНастройки();
	
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ДопНастройки);
	Ожидаем.Что(ДопНастройки.ИзмененныеКаталоги.Количество(), Истина).Равно(0);
	
КонецПроцедуры

#КонецОбласти

#Область ОтключениеПолнотекстовогоПоиска
Процедура ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаИмеетМетодПолученияНастроек() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ОтключениеПолнотекстовогоПоиска.os");
	
	СценарийИмеетМетод(ОбъектСценария, НазваниеМетодаНастроек());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаВозвращаетНастройки() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ОтключениеПолнотекстовогоПоиска.os");
	
	СценарийВозвращаетНастройки(ОбъектСценария, "ОтключениеПолнотекстовогоПоиска");
	
КонецПроцедуры

#КонецОбласти

#Область РазборОтчетовОбработокРасширений
Процедура ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийИмеетМетодПолученияНастроек() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("РазборОтчетовОбработокРасширений.os");
	
	СценарийИмеетМетод(ОбъектСценария, НазваниеМетодаНастроек());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийВозвращаетНастройки() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("РазборОтчетовОбработокРасширений.os");
	
	СценарийВозвращаетНастройки(ОбъектСценария, "РазборОтчетовОбработокРасширений");
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДублейПроцедурИФункций
Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурВызываетИсключение() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Файл = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурНегативныйТест.bsl"));
	СПараметрами = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурСПараметрами.bsl"));
	
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "обнаружены неуникальные имена методов");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, СПараметрами, "обнаружены неуникальные имена методов");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурОбработаетФайл() Экспорт
	
	Файл = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурПоложительныйТест.bsl"));
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоИстина();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНесуществующийФайл() Экспорт
	
	Файл = Новый Файл(ПолучитьИмяВременногоФайла("bsl"));
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоЛожь();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНеИсходник() Экспорт
	
	Файл = Новый Файл(МенеджерВременныхФайлов.СоздатьФайл("xml"));
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоЛожь();
	
КонецПроцедуры


Процедура ТестДолжен_ПроверитьЗагрузкуСценариевПоИмени() Экспорт
	
	Файл = Новый Файл(МенеджерВременныхФайлов.СоздатьФайл("bsl"));
	
	Имена = Новый Массив;
	
	Имена.Добавить("ПроверкаДублейПроцедурИФункций");
	
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "Сценарий не получен").Равно(1);
	
	Имена.Добавить("ПроверкаДублейПроцедурИФункций");
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "Добавлен один и тот же сценарий").Равно(1);
	
	Имена.Добавить("ПроверкаДублейПроцедурИФункций.os");
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "Добавлен один и тот же сценарий").Равно(1);
	
	Имена.Добавить("РазборОтчетовОбработокРасширений.os");
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "С массивом загружаемых сценариев что-то пошло не так").Равно(2);
	
КонецПроцедуры

#КонецОбласти
#КонецОбласти
#Область СинхронизацияОбъектовМетаданныхИФайлов
Процедура ТестДолжен_ПроверитьЧтоСинхронизацияОбъектовМетаданныхВызываетИсключение() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("СинхронизацияОбъектовМетаданныхИФайлов.os");
	Файл = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "СинхронизацияОбъектовМетаданныхИФайлов\Configuration.xml"));
	
	// Переименование типа без переименования каталога
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Имя каталога Ancillary отличается от метаданного ancillary");
	// удаление типа без удаления файлов
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Необходимо удалить файлы");
	// базовые элементы
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог ChartsOfCharacteristicTypes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Catalogs");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommandGroups");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonAttributes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonCommands");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonForms");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonModules");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonPictures");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonTemplates");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Constants");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог DataProcessors");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог DefinedTypes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Documents");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Enums");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог EventSubscriptions");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог FunctionalOptions");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог InformationRegisters");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Languages");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Reports");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Roles");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог ScheduledJobs");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог SessionParameters");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Subsystems");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог XDTOPackages");
	// элементы метаданых
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Language.Русский");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Subsystem.ПодсистемыБСП");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonPicture.GUID");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Role.АвтоТестированиеАдминистратор");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для SessionParameter.автоТестирование");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonTemplate.HiddenStart");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonModule.sFTPКлиентСервер");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonAttribute.UID");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для XDTOPackage.bsp_ancillary");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для EventSubscription.ВерсионированиеПриЗаписи");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для ScheduledJob.РоботАвтоматическаяОбработкаИзмененийАдресногоКлассификатора");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для FunctionalOption.ВестиЖурналДействийПользователя");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для DefinedType.ТипUIDСтрока");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonCommand.АудиторскийСлед");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommandGroup.Печать");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Constant.АдресатыПолученияУведомленийОбИзмененияхВАлгоритмах");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonForm.АвторизацияПользователя");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Catalog.АдресаЭлектроннойПочты");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Document.АттестацияРазработчика");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Enum.ВариантХраненияФайлов");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Report.анализЖурналаРегистрации");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для DataProcessor.активныеПользователи");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для InformationRegister.администраторыБаз");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для ChartOfCharacteristicTypes.РасширенныеХарактеристикиОбъектов");
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#Область СлужебныйПрограммныйИнтерфейс
Процедура ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, ТекстИсключения)
	
	ДополнительныеНастройки = ПолучитьДополнительныеНастройки();
	ПараметрыМетода = Новый Массив;
	
	ПараметрыМетода.Добавить(Файл);
	ПараметрыМетода.Добавить(Файл.Путь);
	ПараметрыМетода.Добавить(ДополнительныеНастройки);
	
	Ожидаем.Что(ОбъектСценария).Метод("ОбработатьФайл", ПараметрыМетода).ВыбрасываетИсключение(ТекстИсключения);
	
КонецПроцедуры

Процедура СценарийИмеетМетод(ОбъектСценария, ИмяМетода)
	
	Рефлектор = Новый Рефлектор;
	ЕстьМетод = Рефлектор.МетодСуществует(ОбъектСценария, ИмяМетода);
	
	Ожидаем.Что(ЕстьМетод, Истина).ЭтоИстина();
	
КонецПроцедуры

Функция ПолучитьСценарий(ИмяСценария)
	
	Сценарий = ОбъединитьПути(КаталогИсходников(), "src", "СценарииОбработки", ИмяСценария);
	ОбъектСценария = ЗагрузитьСценарий(Сценарий);
	
	Возврат ОбъектСценария;
	
КонецФункции

Процедура СценарийВозвращаетНастройки(ОбъектСценария, ИмяНастройки)
	
	Рефлектор = Новый Рефлектор;
	СтруктураНастроек = Рефлектор.ВызватьМетод(ОбъектСценария, НазваниеМетодаНастроек());
	
	Утверждения.ПроверитьРавенство(СтруктураНастроек.ИмяСценария, ИмяНастройки);
	Утверждения.ПроверитьРавенство(ТипЗнч(СтруктураНастроек.Настройка), Тип("Соответствие"));
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьБагДвижкаOscript() Экспорт
	
	Если ВерсияOscriptБольше1_0_21() Тогда
		
		Чтение = Новый ЧтениеТекста(Фикстура("ТаблицаЗначений.txt"), "UTF-8");
		
		ТЧ = Новый ТаблицаЗначений;
		ТЧ.Колонки.Добавить("Значение");
		ТЧ.Колонки.Добавить("Количество");
		
		Строка = Чтение.ПрочитатьСтроку();
		
		Пока Строка <> Неопределено Цикл
			СтрТЧ = ТЧ.Добавить();
			СтрТЧ.Значение = СокрЛП(Строка); // с преобразованием в число проблема будет та же самая
			СтрТЧ.Количество = 1;
			
			Строка = Чтение.ПрочитатьСтроку();
		КонецЦикла;
		
		ТЧ.Свернуть("Значение", "Количество");
		Строка = ТЧ.Найти("53", "Значение");
		
		Ожидаем.Что(Строка.Количество).Больше(1); 
		
	КонецЕсли;
	// когда этот тест начнет падать надо сделать
	// 1. Удалить из зависимостей пакета sevmer
	// 2. Удалить директивы #использовть semver
	// 3. Удалить функцию ВерсияOscriptБольше1_0_21
	// 4. Удалить тест
	// 5. Вернуть использование метода свернуть по тегу "TODO: Вернуть свернуть"

КонецПроцедуры

Функция ВерсияOscriptБольше1_0_21()
	
	Возврат Версии.ВерсияБольше(СокрЛП(Новый СистемнаяИнформация().Версия), "1.0.21");
	
КонецФункции
Процедура ВключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ВыключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Информация);
КонецПроцедуры

Функция КаталогТестовыхФикстур()
	Возврат ОбъединитьПути(КаталогИсходников(), "tests\fixtures");
КонецФункции

Функция Фикстура(ПутьВКаталогеФикстур)
	
	Возврат ОбъединитьПути(КаталогТестовыхФикстур(), ПутьВКаталогеФикстур)
КонецФункции

Функция КаталогИсходников()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции

Функция НазваниеМетодаНастроек()
	
	Возврат "ПолучитьСтандартныеНастройкиСценария";
	
КонецФункции

Функция ПолучитьДополнительныеНастройки()
	
	УправлениеНастройками = МенеджерНастроек.НастройкиРепозитория(ТекущийКаталог(), Ложь);
	Настройка = МенеджерНастроек.НастройкиПроекта().Получить("НастройкиСценариев");
	ДополнительныеНастройки = Новый Структура("Лог, Настройки, ИзмененныеКаталоги", Лог, Настройка, Новый Массив());
	
	Возврат ДополнительныеНастройки;
	
КонецФункции

Функция ПодготовитьИзменяемыйТестовыйФайл(Знач ИмяТестовогоФайла)
	
	ПутьКТесту = ОбъединитьПути(КаталогТестовыхФикстур(), ИмяТестовогоФайла);
	ПутьКФайлу = МенеджерВременныхФайлов.СоздатьФайл(ИмяТестовогоФайла);
	КопироватьФайл(ПутьКТесту, ПутьКФайлу);
	Файл = Новый Файл(ПутьКФайлу);
	
	Возврат Файл;
	
КонецФункции

#КонецОбласти