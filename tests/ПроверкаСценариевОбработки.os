// BSLLS:LineLength-off
#Использовать asserts
#Использовать logos
#Использовать tempfiles
#Использовать fs
#Использовать ".."

Перем юТест;
Перем Лог;
Перем МенеджерВременныхФайлов;

#Область ПрограммныйИнтерфейс
// Основная точка входа
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСинхронизацияОбъектовМетаданныхВызываетИсключениеEDT");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСортировкуСоставаМетаданных");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСортировкуВПодсистемах");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурВызываетИсключение");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурОбработаетФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНесуществующийФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНеИсходник");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийИмеетМетодПолученияНастроек");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаВозвращаетНастройки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийВозвращаетНастройки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияНеИндексируетНеизмененные");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетТолькоНаписание");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСинхронизацияОбъектовМетаданныхВызываетИсключение");

	ВсеТесты.Добавить("ТестДолжен_ПроверитьЗагрузкуСценариевПоИмени");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийДобавлениеТестовВРасширениеОбрабатываетНегативныеКейсы");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийДобавлениеТестовВРасширениеДобавляетИДополняетМодулиТестов");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьИзменениеТегаКастомизацииФормы");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	МенеджерПриложения.Инициализировать(ПараметрыПриложения);
	
	ВремТестер = Новый Тестер;
	Лог = Логирование.ПолучитьЛог(ВремТестер.ИмяЛога());
	
	ВключитьПоказОтладки();
	
	МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов;
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	МенеджерВременныхФайлов.Удалить();
	МенеджерВременныхФайлов = Неопределено;
	
КонецПроцедуры

#Область СортировкаСоставаМетаданных

Процедура ТестДолжен_ПроверитьСортировкуСоставаМетаданных() Экспорт

	ОбъектСценария = ПолучитьСценарий("СортировкаДереваМетаданных.os");
	Настройки = ПолучитьДополнительныеНастройки();
	настр = Новый Соответствие;
	настр.Вставить("УчитываяПрефиксы", "тн_");
	Настройки.Настройки.Вставить("СортировкаДереваМетаданных", настр);

	ИмяФайла = "СортировкаДереваМетаданных/Configuration.mdo";
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла, "Configuration.mdo");


	 Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	 Ожидаем.Что(Результат, Истина).ЭтоИстина();


	 ИмяФайла = "СортировкаДереваМетаданных/Configuration.xml";
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла, "Configuration.xml");
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, Истина).ЭтоИстина();

КонецПроцедуры

#КонецОбласти

#Область СортировкаСоставаМетаданных

Процедура ТестДолжен_ПроверитьСортировкуВПодсистемах() Экспорт

	ОбъектСценария = ПолучитьСценарий("СортировкаСоставаПодсистем.os");
	Настройки = ПолучитьДополнительныеНастройки();

	ИмяФайла = "СортировкаОбъектовВПодсистемах/Интеграция.xml";
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла, "Интеграция.xml", "Subsystems");
	
	ТекстДо = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, Истина).ЭтоИстина();
	ТекстПосле = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстДо, Истина).Не_().Равно(ТекстПосле);
	Ожидаем.Что(СтрЧислоСтрок(ТекстДо), Истина).Равно(СтрЧислоСтрок(ТекстПосле));
	
	ИмяФайла = "СортировкаОбъектовВПодсистемах/УведомленияПриИзмененииОбъектов.mdo";
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла, "УведомленияПриИзмененииОбъектов.mdo", "Subsystems");
	ТекстДо = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, Истина).ЭтоИстина();
	ТекстПосле = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстДо, Истина).Не_().Равно(ТекстПосле);
	Ожидаем.Что(СтрЧислоСтрок(ТекстДо), Истина).Равно(СтрЧислоСтрок(ТекстПосле));

	ИмяФайла = "СортировкаОбъектовВПодсистемах/ОбменСообщениями.mdo";
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла, "ОбменСообщениями.mdo", "Subsystems");

	ТекстДо = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, Истина).ЭтоИстина();
	ТекстПосле = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстДо, Истина).Равно(ТекстПосле);
	Ожидаем.Что(СтрЧислоСтрок(ТекстДо), Истина).Равно(СтрЧислоСтрок(ТекстПосле));

КонецПроцедуры

#КонецОбласти


#Область ИсправлениеНеКаноническогоНаписания

Процедура ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетФайл() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ИсправлениеНеКаноническогоНаписания.os");
	ИмяФайла = "ИсправлениеНеКаноническогоНаписания.bsl";
	
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла);
	
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	Ожидаем.Что(Результат, Истина).ЭтоИстина();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетТолькоНаписание() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ИсправлениеНеКаноническогоНаписания.os");
	ИмяФайла = "ИсправлениеНеКаноническогоНаписания.bsl";
	
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла);
	ТекстФайлаДо = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	ТекстФайлаПосле = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	
	// текст изменен
	Ожидаем.Что(ТекстФайлаДо, Истина).Не_().Равно(ТекстФайлаПосле);
	// текст тождественен
	Ожидаем.Что(ВРег(ТекстФайлаДо), Истина).Равно(ВРег(ТекстФайлаПосле));
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияНеИндексируетНеизмененные() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ИсправлениеНеКаноническогоНаписания.os");
	ИмяФайла = "ИсправлениеНеКаноническогоНаписания.bsl";
	
	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла);
	
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	ДопНастройки = ПолучитьДополнительныеНастройки();
	
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ДопНастройки);
	Ожидаем.Что(ДопНастройки.ИзмененныеКаталоги.Количество(), Истина).Равно(0);
	
КонецПроцедуры

#КонецОбласти

#Область ОтключениеПолнотекстовогоПоиска
Процедура ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаИмеетМетодПолученияНастроек() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ОтключениеПолнотекстовогоПоиска.os");
	
	СценарийИмеетМетод(ОбъектСценария, НазваниеМетодаНастроек());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаВозвращаетНастройки() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ОтключениеПолнотекстовогоПоиска.os");
	
	СценарийВозвращаетНастройки(ОбъектСценария, "ОтключениеПолнотекстовогоПоиска");
	
КонецПроцедуры

#КонецОбласти

#Область РазборОтчетовОбработокРасширений
Процедура ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийИмеетМетодПолученияНастроек() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("РазборОтчетовОбработокРасширений.os");
	
	СценарийИмеетМетод(ОбъектСценария, НазваниеМетодаНастроек());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийВозвращаетНастройки() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("РазборОтчетовОбработокРасширений.os");
	
	СценарийВозвращаетНастройки(ОбъектСценария, "РазборОтчетовОбработокРасширений");
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДублейПроцедурИФункций
Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурВызываетИсключение() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Файл = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурНегативныйТест.bsl"));
	СПараметрами = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурСПараметрами.bsl"));
	
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "обнаружены неуникальные имена методов");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, СПараметрами, "обнаружены неуникальные имена методов");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурОбработаетФайл() Экспорт
	
	Файл = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурПоложительныйТест.bsl"));
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоИстина();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНесуществующийФайл() Экспорт
	
	Файл = Новый Файл(ПолучитьИмяВременногоФайла("bsl"));
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоЛожь();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНеИсходник() Экспорт
	
	Файл = Новый Файл(МенеджерВременныхФайлов.СоздатьФайл("xml"));
	ОбъектСценария = ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоЛожь();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗагрузкуСценариевПоИмени() Экспорт
	
	Файл = Новый Файл(МенеджерВременныхФайлов.СоздатьФайл("bsl"));
	
	Имена = Новый Массив;
	
	Имена.Добавить("ПроверкаДублейПроцедурИФункций");
	
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "Сценарий не получен").Равно(1);
	
	Имена.Добавить("ПроверкаДублейПроцедурИФункций");
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "Добавлен один и тот же сценарий").Равно(1);
	
	Имена.Добавить("ПроверкаДублейПроцедурИФункций.os");
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "Добавлен один и тот же сценарий").Равно(1);
	
	Имена.Добавить("РазборОтчетовОбработокРасширений.os");
	Сценарии = СценарииОбработки.Загрузить(Файл.Путь, "", Имена);
	Ожидаем.Что(Сценарии.Количество(), "С массивом загружаемых сценариев что-то пошло не так").Равно(2);
	
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияОбъектовМетаданныхИФайлов
Процедура ТестДолжен_ПроверитьЧтоСинхронизацияОбъектовМетаданныхВызываетИсключение() Экспорт

	МетаданныеКонфигурации.СброситьКеш(); // Если не сбрасывать будет ошибка при кешировани каталогов для EDT и Конфигуратора
	
	ОбъектСценария = ПолучитьСценарий("СинхронизацияОбъектовМетаданныхИФайлов.os");
	Файл = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "СинхронизацияОбъектовМетаданныхИФайлов/Configuration.xml"));
	
	// Переименование типа без переименования каталога
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Имя каталога Ancillary отличается от метаданного ancillary");
	// удаление типа без удаления файлов
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Необходимо удалить файлы");
	// базовые элементы
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог ChartsOfCharacteristicTypes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Catalogs");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommandGroups");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonAttributes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonCommands");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonForms");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonModules");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonPictures");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonTemplates");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Constants");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог DataProcessors");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог DefinedTypes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Documents");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Enums");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог EventSubscriptions");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог FunctionalOptions");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог InformationRegisters");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Languages");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Reports");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Roles");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог ScheduledJobs");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог SessionParameters");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Subsystems");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог XDTOPackages");
	// элементы метаданных
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Language.Русский");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Subsystem.ПодсистемыБСП");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonPicture.GUID");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Role.АвтоТестированиеАдминистратор");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для SessionParameter.автоТестирование");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonTemplate.HiddenStart");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonModule.sFTPКлиентСервер");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonAttribute.UID");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для XDTOPackage.bsp_ancillary");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для EventSubscription.ВерсионированиеПриЗаписи");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для ScheduledJob.РоботАвтоматическаяОбработкаИзмененийАдресногоКлассификатора");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для FunctionalOption.ВестиЖурналДействийПользователя");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для DefinedType.ТипUIDСтрока");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonCommand.АудиторскийСлед");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommandGroup.Печать");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Constant.АдресатыПолученияУведомленийОбИзмененияхВАлгоритмах");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonForm.АвторизацияПользователя");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Catalog.АдресаЭлектроннойПочты");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Document.АттестацияРазработчика");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Enum.ВариантХраненияФайлов");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Report.анализЖурналаРегистрации");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для DataProcessor.активныеПользователи");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для InformationRegister.администраторыБаз");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для ChartOfCharacteristicTypes.РасширенныеХарактеристикиОбъектов");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСинхронизацияОбъектовМетаданныхВызываетИсключениеEDT() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("СинхронизацияОбъектовМетаданныхИФайлов.os");
	Файл = Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "СинхронизацияОбъектовМетаданныхИФайловEDT/Configuration/Configuration.mdo"));
	
	// Переименование типа без переименования каталога
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Имя каталога Ancillary отличается от метаданного ancillary");
	// удаление типа без удаления файлов
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Необходимо удалить файлы");
	// базовые элементы
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог ChartsOfCharacteristicTypes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Catalogs");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommandGroups");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonAttributes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonCommands");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonForms");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonModules");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonPictures");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог CommonTemplates");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Constants");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог DataProcessors");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог DefinedTypes");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Documents");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Enums");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог EventSubscriptions");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог FunctionalOptions");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог InformationRegisters");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Reports");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Roles");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог ScheduledJobs");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог SessionParameters");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог Subsystems");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствует каталог XDTOPackages");
	// элементы метаданных
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Subsystem.ПодсистемыБСП");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonPicture.GUID");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Role.Администратор");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для SessionParameter.ГруппыДоступаПользователя");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonTemplate.SftpExtension");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonModule.SFTPКлиентСервер");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonAttribute.UID");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для XDTOPackage.bsp_ancillary");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для EventSubscription.ВерсионированиеПриЗаписи");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для ScheduledJob.РоботАвтоматическаяОбработкаИзмененийАдресногоКлассификатора");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для FunctionalOption.ВестиЖурналДействийПользователя");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для DefinedType.ТипUIDСтрока");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommonCommand.АудиторскийСлед");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для CommandGroup.Печать");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Catalog.АдресаЭлектроннойПочты");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Enum.ВариантХраненияФайлов");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для Report.АнализЖурналаРегистрации");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для DataProcessor.АктивныеПользователи");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "Отсутствуют файлы для ChartOfCharacteristicTypes.ТипыЗначенийВидовПравДоступа");
КонецПроцедуры


#КонецОбласти

#Область ДобавлениеТестовВРасширение

Процедура ТестДолжен_ПроверитьЧтоСценарийДобавлениеТестовВРасширениеОбрабатываетНегативныеКейсы() Экспорт
	
	ОбъектСценария = ПолучитьСценарий("ДобавлениеТестовВРасширение.os");
	
	// Проверка параметров сценария.
	ДополнительныеПараметры = Новый Структура("Лог, КаталогРепозитория, ТекущийКаталогИсходныхФайлов", Лог);
	ПараметрыМетода = Новый Массив();
	ПараметрыМетода.Добавить(Новый Файл(ПолучитьИмяВременногоФайла()));
	ПараметрыМетода.Добавить("");
	ПараметрыМетода.Добавить(ДополнительныеПараметры);
	Ожидаем.Что(ОбъектСценария).Метод("ОбработатьФайл", ПараметрыМетода).ВыбрасываетИсключение("не заполнен параметр 'КаталогИсходныхФайлов'");
	ПараметрыМетода[1] = ПараметрыМетода[0].Путь;
	Ожидаем.Что(ОбъектСценария).Метод("ОбработатьФайл", ПараметрыМетода).ВыбрасываетИсключение("не заполнен параметр 'ДополнительныеПараметры.КаталогРепозитория'");
	////////////////////////////////////////////////////////////////////////////////
	
	// Проверка репозитория.
	КаталогРепозитория = МенеджерВременныхФайлов.СоздатьКаталог();
	КаталогКонфигурации = ОбъединитьПути(КаталогРепозитория, "configuration");
	КаталогИсходников = ОбъединитьПути(КаталогКонфигурации, "src");
	СоздатьКаталог(КаталогКонфигурации);
	ФС.КопироватьСодержимоеКаталога(ОбъединитьПути(КаталогТестовыхФикстур(), "cf-edt", "configuration"), КаталогКонфигурации);
	ПодходящийФайл = Новый Файл(ОбъединитьПути(КаталогИсходников, "CommonModules", "ОбщийМодульКлиентЧастичноПокрытый", "Module.bsl"));
	Ожидаем.Что(ПодходящийФайл.Существует(), СтрШаблон("Отсутствует файл-пример '%1'", ПодходящийФайл.ПолноеИмя)).ЭтоИстина();
	ДополнительныеПараметры = ПолучитьДополнительныеНастройки(КаталогРепозитория, КаталогКонфигурации);
	////////////////////////////////////////////////////////////////////////////////
	НастройкиНеEDT = Новый Массив();
	НастройкиНеEDT.Добавить("v8configФорматКонфигуратора.json");
	НастройкиНеEDT.Добавить("v8configФорматНеправильный.json");
	НастройкиНеEDT.Добавить("v8configФорматПоУмолчанию.json");
	Для каждого НастройкаНеEDT Из НастройкиНеEDT Цикл
		
		ИспользоватьТестовуюНастройку(КаталогРепозитория, НастройкаНеEDT);
		Результат = ОбъектСценария.ОбработатьФайл(
				ПодходящийФайл,
				ДополнительныеПараметры.ТекущийКаталогИсходныхФайлов,
				ДополнительныеПараметры);
		Сообщение = СтрШаблон("Обработался файл, вопреки настройке '%1'", НастройкаНеEDT);
		Ожидаем.Что(Результат, Сообщение).ЭтоЛожь();
		
	КонецЦикла;
	////////////////////////////////////////////////////////////////////////////////
	ИспользоватьТестовуюНастройку(КаталогРепозитория, "v8configФорматEDT.json");
	Результат = ОбъектСценария.ОбработатьФайл(
			ПодходящийФайл,
			ДополнительныеПараметры.ТекущийКаталогИсходныхФайлов,
			ДополнительныеПараметры);
	Сообщение = "Обработался файл при отсутствии тестового расширения";
	Ожидаем.Что(Результат, Сообщение).ЭтоЛожь();
	////////////////////////////////////////////////////////////////////////////////
	
	// Проверка файла.
	КаталогТестов = ОбъединитьПути(КаталогРепозитория, "tests");
	КаталогИсходниковТестов = ОбъединитьПути(КаталогТестов, "src");
	ФС.КопироватьСодержимоеКаталога(ОбъединитьПути(КаталогТестовыхФикстур(), "cf-edt", "tests"), КаталогТестов);
	НеподходящиеФайлы = Новый Массив();
	НеподходящиеФайлы.Добавить(Новый Файл(ОбъединитьПути(КаталогИсходников, "CommonModules", "ОбщийМодульКлиентЧастичноПокрытый", "ОбщийМодульКлиентЧастичноПокрытый.mdo")));
	НеподходящиеФайлы.Добавить(Новый Файл(ОбъединитьПути(КаталогИсходниковТестов, "CommonModules", "ОМ_ОбщийМодульКлиентЧастичноПокрытый", "Module.bsl")));
	НеподходящиеФайлы.Добавить(Новый Файл(ПолучитьИмяВременногоФайла("bsl")));
	Ожидаем.Что(НеподходящиеФайлы[0].Существует(), СтрШаблон("Отсутствует файл-пример '%1'", НеподходящиеФайлы[0].ПолноеИмя)).ЭтоИстина();
	Ожидаем.Что(НеподходящиеФайлы[1].Существует(), СтрШаблон("Отсутствует файл-пример '%1'", НеподходящиеФайлы[1].ПолноеИмя)).ЭтоИстина();
	Для каждого НеподходящийФайл Из НеподходящиеФайлы Цикл
		
		Результат = ОбъектСценария.ОбработатьФайл(
				НеподходящийФайл,
				ДополнительныеПараметры.ТекущийКаталогИсходныхФайлов,
				ДополнительныеПараметры);
		Сообщение = СтрШаблон("Обработался неподходящий файл '%1'", НастройкаНеEDT);
		Ожидаем.Что(Результат, Сообщение).ЭтоЛожь();
		
	КонецЦикла;
	////////////////////////////////////////////////////////////////////////////////
	ФайлБезЭкспортныхМетодов = Новый Файл(ОбъединитьПути(КаталогИсходников, "CommonModules", "ОбщийМодульБезЭкспортных", "Module.bsl"));
	Ожидаем.Что(ФайлБезЭкспортныхМетодов.Существует(), СтрШаблон("Отсутствует файл-пример '%1'", ФайлБезЭкспортныхМетодов.ПолноеИмя)).ЭтоИстина();
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Записать(ФайлБезЭкспортныхМетодов.ПолноеИмя, КодировкаТекста.UTF8);
	Результат = ОбъектСценария.ОбработатьФайл(
			ФайлБезЭкспортныхМетодов,
			ДополнительныеПараметры.ТекущийКаталогИсходныхФайлов,
			ДополнительныеПараметры);
	Сообщение = СтрШаблон("Обработался модуль без экспортных методов '%1'", ФайлБезЭкспортныхМетодов.ПолноеИмя);
	Ожидаем.Что(Результат, Сообщение).ЭтоЛожь();
	////////////////////////////////////////////////////////////////////////////////
	Ожидаем.Что(ПодходящийФайл.Существует(), СтрШаблон("Отсутствует файл-пример '%1'", ПодходящийФайл.ПолноеИмя)).ЭтоИстина();
	КаталогНеизвестногоОбъектаМетаданных = ОбъединитьПути(КаталогИсходников, "НеизвестныйТипМетаданных", "ИмяОбъекта");
	СоздатьКаталог(КаталогНеизвестногоОбъектаМетаданных);
	ПутьФайлаНеизвестногоОбъектаМетаданных = ОбъединитьПути(КаталогНеизвестногоОбъектаМетаданных, "Module.bsl");
	КопироватьФайл(ПодходящийФайл.ПолноеИмя, ПутьФайлаНеизвестногоОбъектаМетаданных);
	ФайлНеизвестногоОбъектаМетаданных = Новый Файл(ПутьФайлаНеизвестногоОбъектаМетаданных);
	Результат = ОбъектСценария.ОбработатьФайл(
			ФайлНеизвестногоОбъектаМетаданных,
			ДополнительныеПараметры.ТекущийКаталогИсходныхФайлов,
			ДополнительныеПараметры);
	Сообщение = СтрШаблон("Обработался файл неизвестного объекта метаданных '%1'", ФайлНеизвестногоОбъектаМетаданных.ПолноеИмя);
	Ожидаем.Что(Результат, Сообщение).ЭтоЛожь();
	////////////////////////////////////////////////////////////////////////////////
	ФайлНеподходящегоТипаМетаданных = Новый Файл(ОбъединитьПути(КаталогИсходников, "CommonForms", "ОбщаяФорма1", "Module.bsl"));
	Ожидаем.Что(ФайлНеподходящегоТипаМетаданных.Существует(), СтрШаблон("Отсутствует файл-пример '%1'", ФайлНеподходящегоТипаМетаданных.ПолноеИмя)).ЭтоИстина();
	Результат = ОбъектСценария.ОбработатьФайл(
			ФайлНеподходящегоТипаМетаданных,
			ДополнительныеПараметры.ТекущийКаталогИсходныхФайлов,
			ДополнительныеПараметры);
	Сообщение = СтрШаблон("Обработался файл неподходящего объекта метаданных '%1'", ФайлНеизвестногоОбъектаМетаданных.ПолноеИмя);
	Ожидаем.Что(Результат, Сообщение).ЭтоЛожь();
	////////////////////////////////////////////////////////////////////////////////
	
	// Контроль корректности проведенных проверок.
	Результат = ОбъектСценария.ОбработатьФайл(
			ПодходящийФайл,
			ДополнительныеПараметры.ТекущийКаталогИсходныхФайлов,
			ДополнительныеПараметры);
	Сообщение = СтрШаблон("Не обработался подходящий файл '%1'", ПодходящийФайл.ПолноеИмя);
	Ожидаем.Что(Результат, Сообщение).ЭтоИстина();
	////////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийДобавлениеТестовВРасширениеДобавляетИДополняетМодулиТестов() Экспорт
	
	// Подготовка "репозитория".
	КаталогРепозитория = МенеджерВременныхФайлов.СоздатьКаталог();
	ИспользоватьТестовуюНастройку(КаталогРепозитория, "v8configФорматEDT.json");
	ФС.КопироватьСодержимоеКаталога(ОбъединитьПути(КаталогТестовыхФикстур(), "cf-edt"), КаталогРепозитория);
	КаталогКонфигурации = ОбъединитьПути(КаталогРепозитория, "configuration");
	КаталогИсходников = ОбъединитьПути(КаталогКонфигурации, "src");
	КаталогТестов = ОбъединитьПути(КаталогРепозитория, "tests");
	
	// Прогон сценария по всем файлам исходников.
	ОбъектСценария = ПолучитьСценарий("ДобавлениеТестовВРасширение.os");
	ДополнительныеПараметры = ПолучитьДополнительныеНастройки(КаталогРепозитория, КаталогКонфигурации);
	ФайлыПроекта = НайтиФайлы(ОбъединитьПути(КаталогКонфигурации, "src"), ПолучитьМаскуВсеФайлы(), Истина);
	Для каждого ФайлПроекта Из ФайлыПроекта Цикл
		
		Если ФайлПроекта.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = ОбъектСценария.ОбработатьФайл(ФайлПроекта, ДополнительныеПараметры.ТекущийКаталогИсходныхФайлов, ДополнительныеПараметры);
		
	КонецЦикла;
	
	// Проверка модулей тестов.
	ФайлОписанияКонфигурацииТестов = Новый Файл(ОбъединитьПути(КаталогТестов, "src", "Configuration", "Configuration.mdo"));
	ОписаниеКонфигурацииТестов = ФайловыеОперации.ПрочитатьТекстФайла(ФайлОписанияКонфигурацииТестов.ПолноеИмя);
	КаталогОбщихМодулейТестов = ОбъединитьПути(КаталогТестов, "src", "CommonModules");
	Для каждого Кейс Из КейсыПроверкиДобавленияМодулейТестов() Цикл
		
		// Наличие модуля в исходниках.
		ФайлИсходников = Новый Файл(ОбъединитьПути(КаталогИсходников, Кейс.КаталогТипаМетаданных, Кейс.ИмяМетаданных, Кейс.ИмяМодуляМетаданных));
		Сообщение = СтрШаблон("Не найден файл исходников '%1'", ФайлИсходников.ПолноеИмя);
		Ожидаем.Что(ФайлИсходников.Существует(), Сообщение).ЭтоИстина();
		
		// Описание конфигурации.
		СтрокаПоиска = СтрШаблон("<commonModules>CommonModule.%1</commonModules>", Кейс.ИмяТестовогоМодуля);
		ЧислоВхождений = СтрЧислоВхождений(ОписаниеКонфигурацииТестов, СтрокаПоиска);
		Сообщение = СтрШаблон(
				"Неправильное количество упоминаний модуля '%1' в описании конфигурации:
				|%2",
				Кейс.ИмяТестовогоМодуля, ОписаниеКонфигурацииТестов);
		Ожидаем.Что(ЧислоВхождений, Сообщение).Равно(1);
		
		// Описание модуля тестов.
		ФайлОписанияТеста = Новый Файл(ОбъединитьПути(КаталогОбщихМодулейТестов, Кейс.ИмяТестовогоМодуля, Кейс.ИмяТестовогоМодуля + ".mdo"));
		Сообщение = СтрШаблон("Не создано описание модуля тестов '%1'", ФайлОписанияТеста.ПолноеИмя);
		Ожидаем.Что(ФайлОписанияТеста.Существует(), Сообщение).ЭтоИстина();
		ОписаниеТеста = ФайловыеОперации.ПрочитатьТекстФайла(ФайлОписанияТеста.ПолноеИмя);
		// Клиент.
		СтрокаПоиска = СтрШаблон("<clientManagedApplication>%1</clientManagedApplication>", XMLСтрока(Кейс.Клиент));
		ЧислоВхождений = СтрЧислоВхождений(ОписаниеТеста, СтрокаПоиска);
		ЧислоВхожденийПравильное = ?(Кейс.Клиент, ЧислоВхождений = 1, ЧислоВхождений <= 1);
		Сообщение = СтрШаблон(
				"Неправильное количество упоминаний контекста 'Клиент = %1' в описании модуля тестов '%2':
				|%3",
				Кейс.Клиент, ФайлОписанияТеста.ПолноеИмя, ОписаниеТеста);
		Ожидаем.Что(ЧислоВхожденийПравильное, Сообщение).ЭтоИстина();
		// Сервер.
		СтрокаПоиска = СтрШаблон("<server>%1</server>", XMLСтрока(Кейс.Сервер));
		ЧислоВхождений = СтрЧислоВхождений(ОписаниеТеста, СтрокаПоиска);
		ЧислоВхожденийПравильное = ?(Кейс.Сервер, ЧислоВхождений = 1, ЧислоВхождений <= 1);
		Сообщение = СтрШаблон(
				"Неправильное количество упоминаний контекста 'Сервер = %1' в описании модуля тестов '%2':
				|%3",
				Кейс.Сервер, ФайлОписанияТеста.ПолноеИмя, ОписаниеТеста);
		Ожидаем.Что(ЧислоВхожденийПравильное, Сообщение).ЭтоИстина();
		
		// Модуль тестов.
		ФайлТеста = Новый Файл(ОбъединитьПути(КаталогОбщихМодулейТестов, Кейс.ИмяТестовогоМодуля, "Module.bsl"));
		Сообщение = СтрШаблон("Не создан модуль тестов '%1'", ФайлТеста.ПолноеИмя);
		Ожидаем.Что(ФайлТеста.Существует(), Сообщение).ЭтоИстина();
		ТекстТеста = ФайловыеОперации.ПрочитатьТекстФайла(ФайлТеста.ПолноеИмя);
		// Наличие исполняемого сценария.
		ИмяМетодаМодуля = ?(Кейс.Глобальный, "Глобальный", "") + Кейс.ИмяМетодаМодуля;
		СтрокаПоиска = СтрШаблон("ИсполняемыеСценарии.Добавить(""%1"");", ИмяМетодаМодуля);
		ЧислоВхождений = СтрЧислоВхождений(ТекстТеста, СтрокаПоиска);
		Сообщение = СтрШаблон(
				"Неправильное количество упоминаний исполняемого сценария '%1' в модуле тестов '%2':
				|%3",
				ИмяМетодаМодуля, ФайлТеста.ПолноеИмя, ТекстТеста);
		Ожидаем.Что(ЧислоВхождений, Сообщение).Равно(1);
		// Наличие метода.
		СтрокаПоиска = СтрШаблон("Процедура %1(", ИмяМетодаМодуля);
		ЧислоВхождений = СтрЧислоВхождений(ТекстТеста, СтрокаПоиска);
		Сообщение = СтрШаблон(
				"Неправильное количество упоминаний метода '%1' в модуле тестов '%2':
				|%3",
				ИмяМетодаМодуля, ФайлТеста.ПолноеИмя, ТекстТеста);
		Ожидаем.Что(ЧислоВхождений, Сообщение).Равно(1);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОтключениеРазрешенияИзменятьФорму

Процедура ТестДолжен_ПроверитьИзменениеТегаКастомизацииФормы() Экспорт
	
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("123", "test.os");
	
	ОбъектСценария = ПолучитьСценарий("ОтключениеРазрешенияИзменятьФорму.os");
	
	Настройки = ПолучитьДополнительныеНастройки();
	Настройки.ТипИзменения = ВариантИзмененийФайловGit.Добавлен;

	// сценарий не берет файлы с расширением .os
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, Ложь).ЭтоЛожь();
	
	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("123", "Form.form", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы edt формата").ЭтоИстина();
	
	
	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("123", "Form.xml", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата конфигуратора").ЭтоИстина();
	
	// файл не изменен 
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<allowFormCustomize>false</allowFormCustomize>", "Form.form", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Файл изменился, а не должен был").Равно("<allowFormCustomize>false</allowFormCustomize>");

	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<allowFormCustomize>true</allowFormCustomize>", "Form.form", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата edt").ЭтоИстина();
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Замена в теге edt не удалась").Содержит("false");
	Ожидаем.Что(ТекстФайла, "Замена в теге edt не удалась").Содержит("<allowFormCustomize>false</allowFormCustomize>");
	

	
	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<WindowOpeningMode>LockOwnerWindow</WindowOpeningMode>", "Form.xml", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата конфигуратора").ЭтоИстина();
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("false");
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("<Customizable>false</Customizable>");
	
	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<WindowOpeningMode>LockOwnerWindow</WindowOpeningMode>
	|<Customizable>true</Customizable>", "Form.xml", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата конфигуратора").ЭтоИстина();
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("false");
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("<Customizable>false</Customizable>");

	// файл обработан
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<WindowOpeningMode>LockOwnerWindow</WindowOpeningMode>
	|<Customizable>false</Customizable>", "Form.xml", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата конфигуратора").ЭтоИстина();
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("false");
	Ожидаем.Что(ТекстФайла, "Замена в теге конфигуратора не удалась").Содержит("<Customizable>false</Customizable>");



	// файл обработан. При этом  сценарий реагирует только на `добавленные` файлы, но был вызван явно через передачу параметра
	Настройки = ПолучитьДополнительныеНастройки();
	Настройки.ЗатребованныеСценарии = Новый Массив;
	Настройки.ЗатребованныеСценарии.Добавить(ОбъектСценария.ИмяСценария());
	Настройки.ТипИзменения = ВариантИзмененийФайловGit.Изменен;
	
	Файл = ПодготовитьИзменяемыйТестовыйФайлИзТекста("<allowFormCustomize>true</allowFormCustomize>", "Form.form", Истина);
	Результат = ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, Настройки);
	Ожидаем.Что(Результат, "Ошибка обработки формы формата edt").ЭтоИстина();
	ТекстФайла = ФайловыеОперации.ПрочитатьТекстФайла(Файл.ПолноеИмя);
	Ожидаем.Что(ТекстФайла, "Замена в теге edt не удалась").Содержит("false");
	Ожидаем.Что(ТекстФайла, "Замена в теге edt не удалась").Содержит("<allowFormCustomize>false</allowFormCustomize>");
	
		
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область Служебные

Процедура ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, ТекстИсключения)
	
	ДополнительныеНастройки = ПолучитьДополнительныеНастройки();
	ПараметрыМетода = Новый Массив;
	
	ПараметрыМетода.Добавить(Файл);
	ПараметрыМетода.Добавить(Файл.Путь);
	ПараметрыМетода.Добавить(ДополнительныеНастройки);
	
	Ожидаем.Что(ОбъектСценария).Метод("ОбработатьФайл", ПараметрыМетода).ВыбрасываетИсключение(ТекстИсключения);
	
КонецПроцедуры

Процедура СценарийИмеетМетод(ОбъектСценария, ИмяМетода)
	
	Рефлектор = Новый Рефлектор;
	ЕстьМетод = Рефлектор.МетодСуществует(ОбъектСценария, ИмяМетода);
	
	Ожидаем.Что(ЕстьМетод, Истина).ЭтоИстина();
	
КонецПроцедуры

Функция ПолучитьСценарий(ИмяСценария)
	
	Сценарий = ОбъединитьПути(КаталогИсходников(), "src", "СценарииОбработки", ИмяСценария);
	ОбъектСценария = ЗагрузитьСценарий(Сценарий);
	
	Возврат ОбъектСценария;
	
КонецФункции

Процедура СценарийВозвращаетНастройки(ОбъектСценария, ИмяНастройки)
	
	Рефлектор = Новый Рефлектор;
	СтруктураНастроек = Рефлектор.ВызватьМетод(ОбъектСценария, НазваниеМетодаНастроек());
	
	Утверждения.ПроверитьРавенство(СтруктураНастроек.ИмяСценария, ИмяНастройки);
	Утверждения.ПроверитьРавенство(ТипЗнч(СтруктураНастроек.Настройка), Тип("Соответствие"));
	
КонецПроцедуры

Процедура ВключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ВыключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Информация);
КонецПроцедуры

Функция КаталогТестовыхФикстур()
	Возврат Норма(ОбъединитьПути(КаталогИсходников(), "tests/fixtures"));
КонецФункции

Функция Фикстура(ПутьВКаталогеФикстур)
	Возврат ОбъединитьПути(КаталогТестовыхФикстур(), ПутьВКаталогеФикстур);
КонецФункции

Функция КаталогИсходников()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции

Функция НазваниеМетодаНастроек()
	
	Возврат "ПолучитьСтандартныеНастройкиСценария";
	
КонецФункции

Функция ПолучитьДополнительныеНастройки(Знач КаталогРепозитория = Неопределено, Знач ТекущийКаталогИсходныхФайлов = Неопределено)
	
	Если КаталогРепозитория = Неопределено Тогда
		КаталогРепозитория = ТекущийКаталог();
	КонецЕсли;
	
	УправлениеНастройками = МенеджерНастроек.НастройкиРепозитория(КаталогРепозитория, Ложь);
	Настройка = МенеджерНастроек.НастройкиПроекта().Получить("НастройкиСценариев");
	
	ДополнительныеНастройки = СценарииОбработки.ПолучитьСтандартныеПараметрыОбработки();
	ДополнительныеНастройки.Лог = Лог;
	ДополнительныеНастройки.КаталогРепозитория = КаталогРепозитория;
	ДополнительныеНастройки.ТекущийКаталогИсходныхФайлов = ТекущийКаталогИсходныхФайлов;
	ДополнительныеНастройки.Настройки = Настройка;
	
	Возврат ДополнительныеНастройки;
	
КонецФункции

Функция ПодготовитьИзменяемыйТестовыйФайл(Знач ИмяТестовогоФайла, ЗаписатьКакИмя = "", ВДиректории = "")
	
	ПутьКТесту = ОбъединитьПути(КаталогТестовыхФикстур(), ИмяТестовогоФайла);
	
	ПутьКФайлу = МенеджерВременныхФайлов.СоздатьКаталог();
	МенеджерВременныхФайлов.БазовыйКаталог = ПутьКФайлу;
	
	Если ЗаписатьКакИмя <> "" Тогда	
		Если ВДиректории <> "" Тогда 
			ПутьКФайлу  = МенеджерВременныхФайлов.СоздатьКаталог(Норма(ОбъединитьПути(ПутьКФайлу, ВДиректории)));
		КонецЕсли;

		ПутьКФайлу = ОбъединитьПути(ПутьКФайлу, ЗаписатьКакИмя);
	Иначе
		Путь = Норма(ОбъединитьПути(ПутьКФайлу, ИмяТестовогоФайла));
		ПутьКФайлу = МенеджерВременныхФайлов.СоздатьФайл(Путь);

	КонецЕсли;

	КопироватьФайл(Норма(ПутьКТесту), ПутьКФайлу);
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл;
	
КонецФункции

Функция ПодготовитьИзменяемыйТестовыйФайлИзТекста(Знач Текст, Знач Имя, СтрогоеСоответствие = Ложь)
	
	Если СтрогоеСоответствие Тогда
		ПутьКФайлу = МенеджерВременныхФайлов.СоздатьКаталог();
		ПутьКФайлу = ОбъединитьПути(ПутьКФайлу, Имя);
	Иначе
		ПутьКФайлу = МенеджерВременныхФайлов.СоздатьФайл(Имя);
	КонецЕсли;
	
	
	Файл = Новый Файл(ПутьКФайлу);
	ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлу);
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();
	
	Возврат Файл;
	
КонецФункции

Функция Норма(Путь) 
	СисИнфо = Новый СистемнаяИнформация();
	ЭтоWindows	= Найти(НРег(СисИнфо.ВерсияОС), "windows") > 0;

	Если ЭтоWindows Тогда
		Возврат СтрЗаменить(Путь, "/", "\");
	Иначе
		Возврат СтрЗаменить(Путь, "\", "/");
	КонецЕсли;

КонецФункции

Процедура ИспользоватьТестовуюНастройку(КаталогРепозитория, ИмяФайлаНастройки)
	
	КопироватьФайл(
		ОбъединитьПути(КаталогТестовыхФикстур(), "Настройки", ИмяФайлаНастройки),
		ОбъединитьПути(КаталогРепозитория, "v8config.json"));
	
КонецПроцедуры

Функция КейсыПроверкиДобавленияМодулейТестов()
	
	Кейсы = Новый ТаблицаЗначений();
	Кейсы.Колонки.Добавить("КаталогТипаМетаданных");
	Кейсы.Колонки.Добавить("ИмяМетаданных");
	Кейсы.Колонки.Добавить("ИмяМодуляМетаданных");
	Кейсы.Колонки.Добавить("ИмяМетодаМодуля");
	Кейсы.Колонки.Добавить("ИмяТестовогоМодуля");
	Кейсы.Колонки.Добавить("Клиент");
	Кейсы.Колонки.Добавить("Сервер");
	Кейсы.Колонки.Добавить("Глобальный");
	
	ДобавитьКейсПроверкиТестов(Кейсы, "AccountingRegisters", "РегистрБухгалтерии1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РБ_РегистрБухгалтерии1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "AccountingRegisters", "РегистрБухгалтерии1", "RecordSetModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РБ_РегистрБухгалтерии1_МНЗ", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "AccumulationRegisters", "РегистрНакопления1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РН_РегистрНакопления1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "AccumulationRegisters", "РегистрНакопления1", "RecordSetModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РН_РегистрНакопления1_МНЗ", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "BusinessProcesses", "БизнесПроцесс1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "БП_БизнесПроцесс1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "BusinessProcesses", "БизнесПроцесс1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "БП_БизнесПроцесс1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "CalculationRegisters", "РегистрРасчета1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РР_РегистрРасчета1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CalculationRegisters", "РегистрРасчета1", "RecordSetModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РР_РегистрРасчета1_МНЗ", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "Catalogs", "Справочник1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Спр_Справочник1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "Catalogs", "Справочник1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Спр_Справочник1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfAccounts", "ПланСчетов1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПС_ПланСчетов1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfAccounts", "ПланСчетов1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПС_ПланСчетов1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfCalculationTypes", "ПланВидовРасчета1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПВР_ПланВидовРасчета1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfCalculationTypes", "ПланВидовРасчета1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПВР_ПланВидовРасчета1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfCharacteristicTypes", "ПланВидовХарактеристик1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПВХ_ПланВидовХарактеристик1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "ChartsOfCharacteristicTypes", "ПланВидовХарактеристик1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПВХ_ПланВидовХарактеристик1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентЧастичноПокрытый", "Module.bsl", "ПокрытаяПроцедураЭкспортнаяБезПараметров", "ОМ_ОбщийМодульКлиентЧастичноПокрытый", Истина, Ложь); // Уже есть.
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентЧастичноПокрытый", "Module.bsl", "НепокрытаяФункцияЭкспортнаяБезПараметров", "ОМ_ОбщийМодульКлиентЧастичноПокрытый", Истина, Ложь);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульСерверГлобальныйЧастичноПокрытый", "Module.bsl", "глНепокрытаяПроцедураЭкспортнаяБезПараметров", "ОМ_ОбщийМодульСерверГлобальныйЧастичноПокрытый", Ложь, Истина, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульСерверГлобальныйЧастичноПокрытый", "Module.bsl", "глПокрытаяФункцияЭкспортнаяБезПараметров", "ОМ_ОбщийМодульСерверГлобальныйЧастичноПокрытый", Ложь, Истина, Истина); // Уже есть.
	
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентСерверГлобальный", "Module.bsl", "глПроцедураЭкспортнаяБезПараметров", "ОМ_ОбщийМодульКлиентСерверГлобальный", Истина, Истина, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентСерверГлобальный", "Module.bsl", "глПроцедураЭкспортнаяСПараметрами", "ОМ_ОбщийМодульКлиентСерверГлобальный", Истина, Истина, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентСерверГлобальный", "Module.bsl", "глФункцияЭкспортнаяБезПараметров", "ОМ_ОбщийМодульКлиентСерверГлобальный", Истина, Истина, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульКлиентСерверГлобальный", "Module.bsl", "глФункцияЭкспортнаяСПараметрами", "ОМ_ОбщийМодульКлиентСерверГлобальный", Истина, Истина, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "CommonModules", "ОбщийМодульСервер", "Module.bsl", "ПроцедураЭкспортнаяБезПараметров", "ОМ_ОбщийМодульСервер", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "DataProcessors", "Обработка1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Обр_Обработка1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "DataProcessors", "Обработка1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Обр_Обработка1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "Documents", "Документ1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Док_Документ1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "Documents", "Документ1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Док_Документ1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "Enums", "Перечисление1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Пер_Перечисление1_ММ", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "ExchangePlans", "ПланОбмена1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПО_ПланОбмена1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "ExchangePlans", "ПланОбмена1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "ПО_ПланОбмена1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "InformationRegisters", "РегистрСведений1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РС_РегистрСведений1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "InformationRegisters", "РегистрСведений1", "RecordSetModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "РС_РегистрСведений1_МНЗ", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "Reports", "Отчет1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Отч_Отчет1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "Reports", "Отчет1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Отч_Отчет1_МО", Ложь, Истина);
	
	ДобавитьКейсПроверкиТестов(Кейсы, "Tasks", "Задача1", "ManagerModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Зад_Задача1_ММ", Ложь, Истина);
	ДобавитьКейсПроверкиТестов(Кейсы, "Tasks", "Задача1", "ObjectModule.bsl", "ПроцедураЭкспортнаяБезПараметров", "Зад_Задача1_МО", Ложь, Истина);
	
	Возврат Кейсы;
	
КонецФункции

Процедура ДобавитьКейсПроверкиТестов(Кейсы, КаталогТипаМетаданных, ИмяМетаданных, ИмяМодуляМетаданных, ИмяМетодаМодуля, ИмяТестовогоМодуля, Клиент, Сервер, Глобальный = Ложь)
	
	Кейс = Кейсы.Добавить();
	Кейс.КаталогТипаМетаданных = КаталогТипаМетаданных;
	Кейс.ИмяМетаданных = ИмяМетаданных;
	Кейс.ИмяМодуляМетаданных = ИмяМодуляМетаданных;
	Кейс.ИмяМетодаМодуля = ИмяМетодаМодуля;
	Кейс.ИмяТестовогоМодуля = ИмяТестовогоМодуля;
	Кейс.Клиент = Клиент;
	Кейс.Сервер = Сервер;
	Кейс.Глобальный = Глобальный;
	
КонецПроцедуры

#КонецОбласти